{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Reference","text":""},{"location":"#welcome-to-the-featureform-api-reference","title":"Welcome to the Featureform API Reference!","text":"<p>Featureforms Python SDK provides a means to access hosted Featureform instances, as well as the ability to experiment in Localmode. </p> <p>Using this SDK, you can register providers, sources, transformations, features, labels, and training sets  both locally and in a hosted instance. You can also use the serving client functionality to retrieve training sets and  features for online serving.</p>"},{"location":"#additional-support","title":"Additional Support","text":"<p>If you've read the documentation and still have questions, checkout our main docs.</p> <p>You can also join our community on Slack and GitHub!</p>"},{"location":"local/","title":"Local","text":""},{"location":"local/#src.featureform.register.LocalProvider","title":"<code>src.featureform.register.LocalProvider</code>","text":"<p>The LocalProvider exposes the registration functions for LocalMode</p> <p>Using the LocalProvider: <pre><code>from featureform import local\ntransactions = local.register_file(\nname=\"transactions\",\nvariant=\"quickstart\",\ndescription=\"A dataset of fraudulent transactions\",\npath=\"transactions.csv\"\n)\n</code></pre></p> Source code in <code>src/featureform/register.py</code> <pre><code>class LocalProvider:\n\"\"\"\n    The LocalProvider exposes the registration functions for LocalMode\n    **Using the LocalProvider:**\n    ``` py\n    from featureform import local\n    transactions = local.register_file(\n        name=\"transactions\",\n        variant=\"quickstart\",\n        description=\"A dataset of fraudulent transactions\",\n        path=\"transactions.csv\"\n    )\n    ```\n    \"\"\"\ndef __init__(self, registrar, provider):\nself.__registrar = registrar\nself.__provider = provider\ndef name(self) -&gt; str:\nreturn self.__provider.name\ndef register_file(self, name, description, path, variant=\"default\", owner=\"\"):\n\"\"\"Register a local file.\n        **Examples**:\n        ```\n        transactions = local.register_file(\n            name=\"transactions\",\n            variant=\"quickstart\",\n            description=\"A dataset of fraudulent transactions\",\n            path=\"transactions.csv\"\n        )\n        ```\n        Args:\n            name (str): Name for how to reference the file later\n            description (str): Description of the file\n            path (str): Path to the file\n            variant (str): File variant\n            owner (str): Owner of the file\n        Returns:\n            source (LocalSource): source\n        \"\"\"\nif owner == \"\":\nowner = self.__registrar.must_get_default_owner()\n# Store the file as a source\nself.__registrar.register_primary_data(name, variant, SQLTable(path), self.__provider.name, owner, description)\nreturn LocalSource(self.__registrar, name, owner, variant, self.name(), path, description)\ndef insert_provider(self):\nsqldb = SQLiteMetadata()\n# Store a new provider row\nsqldb.insert(\"providers\",\nself.__provider.name,\n\"Provider\",\nself.__provider.description,\nself.__provider.config.type(),\nself.__provider.config.software(),\nself.__provider.team,\n\"sources\",\n\"status\",\nstr(self.__provider.config.serialize(), 'utf-8')\n)\nsqldb.close()\ndef df_transformation(self,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\nname: str = \"\",\ndescription: str = \"\",\ninputs: list = []):\n\"\"\"\n        Register a Dataframe transformation source. The local.df_transformation decorator takes the contents\n        of the following function and executes the code it contains at serving time.\n        The name of the function is used as the name of the source when being registered.\n        The specified inputs are loaded into dataframes that can be accessed using the function parameters.\n        **Examples**:\n        ``` py\n        @local.df_transformation(inputs=[(\"source\", \"one\"), (\"source\", \"two\")]) # Sources are added as inputs\n        def average_user_transaction(df_one, df_two):                           # Sources can be manipulated by adding them as params\n            return source_one.groupby(\"CustomerID\")[\"TransactionAmount\"].mean()\n        ```\n        Args:\n            name (str): Name of source\n            variant (str): Name of variant\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of primary data to be registered\n            inputs (list[Tuple(str, str)]): A list of Source NameVariant Tuples to input into the transformation\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nreturn self.__registrar.df_transformation(name=name,\nvariant=variant,\nowner=owner,\nprovider=self.name(),\ndescription=description,\ninputs=inputs)\ndef sql_transformation(self,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\nname: str = \"\",\ndescription: str = \"\"):\n\"\"\"\n        Register a SQL transformation source. The local.sql_transformation decorator takes the returned string in the\n        following function and executes it as a SQL Query.\n        The name of the function is the name of the resulting source.\n        Sources for the transformation can be specified by adding the Name and Variant in brackets '{{ name.variant }}'.\n        The correct source is substituted when the query is run.\n        **Examples**:\n        ``` py\n        @local.sql_transformation(variant=\"quickstart\")\n        def average_user_transaction():\n            return \"SELECT CustomerID as user_id, avg(TransactionAmount) as avg_transaction_amt from\" \\\n            \" {{transactions.v1}} GROUP BY user_id\"\n        ```\n        Args:\n            name (str): Name of source\n            variant (str): Name of variant\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of primary data to be registered\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nreturn self.__registrar.sql_transformation(name=name,\nvariant=variant,\nowner=owner,\nprovider=self.name(),\ndescription=description)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalProvider.df_transformation","title":"<code>df_transformation(variant='default', owner='', name='', description='', inputs=[])</code>","text":"<p>Register a Dataframe transformation source. The local.df_transformation decorator takes the contents of the following function and executes the code it contains at serving time.</p> <p>The name of the function is used as the name of the source when being registered.</p> <p>The specified inputs are loaded into dataframes that can be accessed using the function parameters.</p> <p>Examples: <pre><code>@local.df_transformation(inputs=[(\"source\", \"one\"), (\"source\", \"two\")]) # Sources are added as inputs\ndef average_user_transaction(df_one, df_two):                           # Sources can be manipulated by adding them as params\nreturn source_one.groupby(\"CustomerID\")[\"TransactionAmount\"].mean()\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source</p> <code>''</code> <code>variant</code> <code>str</code> <p>Name of variant</p> <code>'default'</code> <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of primary data to be registered</p> <code>''</code> <code>inputs</code> <code>list[Tuple(str, str)]</code> <p>A list of Source NameVariant Tuples to input into the transformation</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def df_transformation(self,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\nname: str = \"\",\ndescription: str = \"\",\ninputs: list = []):\n\"\"\"\n    Register a Dataframe transformation source. The local.df_transformation decorator takes the contents\n    of the following function and executes the code it contains at serving time.\n    The name of the function is used as the name of the source when being registered.\n    The specified inputs are loaded into dataframes that can be accessed using the function parameters.\n    **Examples**:\n    ``` py\n    @local.df_transformation(inputs=[(\"source\", \"one\"), (\"source\", \"two\")]) # Sources are added as inputs\n    def average_user_transaction(df_one, df_two):                           # Sources can be manipulated by adding them as params\n        return source_one.groupby(\"CustomerID\")[\"TransactionAmount\"].mean()\n    ```\n    Args:\n        name (str): Name of source\n        variant (str): Name of variant\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of primary data to be registered\n        inputs (list[Tuple(str, str)]): A list of Source NameVariant Tuples to input into the transformation\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nreturn self.__registrar.df_transformation(name=name,\nvariant=variant,\nowner=owner,\nprovider=self.name(),\ndescription=description,\ninputs=inputs)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalProvider.register_file","title":"<code>register_file(name, description, path, variant='default', owner='')</code>","text":"<p>Register a local file.</p> <p>Examples: <pre><code>transactions = local.register_file(\n    name=\"transactions\",\n    variant=\"quickstart\",\n    description=\"A dataset of fraudulent transactions\",\n    path=\"transactions.csv\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for how to reference the file later</p> required <code>description</code> <code>str</code> <p>Description of the file</p> required <code>path</code> <code>str</code> <p>Path to the file</p> required <code>variant</code> <code>str</code> <p>File variant</p> <code>'default'</code> <code>owner</code> <code>str</code> <p>Owner of the file</p> <code>''</code> <p>Returns:</p> Name Type Description <code>source</code> <code>LocalSource</code> <p>source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_file(self, name, description, path, variant=\"default\", owner=\"\"):\n\"\"\"Register a local file.\n    **Examples**:\n    ```\n    transactions = local.register_file(\n        name=\"transactions\",\n        variant=\"quickstart\",\n        description=\"A dataset of fraudulent transactions\",\n        path=\"transactions.csv\"\n    )\n    ```\n    Args:\n        name (str): Name for how to reference the file later\n        description (str): Description of the file\n        path (str): Path to the file\n        variant (str): File variant\n        owner (str): Owner of the file\n    Returns:\n        source (LocalSource): source\n    \"\"\"\nif owner == \"\":\nowner = self.__registrar.must_get_default_owner()\n# Store the file as a source\nself.__registrar.register_primary_data(name, variant, SQLTable(path), self.__provider.name, owner, description)\nreturn LocalSource(self.__registrar, name, owner, variant, self.name(), path, description)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalProvider.sql_transformation","title":"<code>sql_transformation(variant='default', owner='', name='', description='')</code>","text":"<p>Register a SQL transformation source. The local.sql_transformation decorator takes the returned string in the following function and executes it as a SQL Query.</p> <p>The name of the function is the name of the resulting source.</p> <p>Sources for the transformation can be specified by adding the Name and Variant in brackets '{{ name.variant }}'. The correct source is substituted when the query is run.</p> <p>Examples: <pre><code>@local.sql_transformation(variant=\"quickstart\")\ndef average_user_transaction():\nreturn \"SELECT CustomerID as user_id, avg(TransactionAmount) as avg_transaction_amt from\"             \" {{transactions.v1}} GROUP BY user_id\"\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source</p> <code>''</code> <code>variant</code> <code>str</code> <p>Name of variant</p> <code>'default'</code> <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of primary data to be registered</p> <code>''</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def sql_transformation(self,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\nname: str = \"\",\ndescription: str = \"\"):\n\"\"\"\n    Register a SQL transformation source. The local.sql_transformation decorator takes the returned string in the\n    following function and executes it as a SQL Query.\n    The name of the function is the name of the resulting source.\n    Sources for the transformation can be specified by adding the Name and Variant in brackets '{{ name.variant }}'.\n    The correct source is substituted when the query is run.\n    **Examples**:\n    ``` py\n    @local.sql_transformation(variant=\"quickstart\")\n    def average_user_transaction():\n        return \"SELECT CustomerID as user_id, avg(TransactionAmount) as avg_transaction_amt from\" \\\n        \" {{transactions.v1}} GROUP BY user_id\"\n    ```\n    Args:\n        name (str): Name of source\n        variant (str): Name of variant\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of primary data to be registered\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nreturn self.__registrar.sql_transformation(name=name,\nvariant=variant,\nowner=owner,\nprovider=self.name(),\ndescription=description)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalSource","title":"<code>src.featureform.register.LocalSource</code>","text":"<p>LocalSource creates a reference to a source that can be accessed locally.</p> Source code in <code>src/featureform/register.py</code> <pre><code>class LocalSource:\n\"\"\"\n    LocalSource creates a reference to a source that can be accessed locally.\n    \"\"\"\ndef __init__(self,\nregistrar,\nname: str,\nowner: str,\nvariant: str,\nprovider: str,\npath: str,\ndescription: str = \"\"):\nself.registrar = registrar\nself.name = name\nself.variant = variant\nself.owner = owner\nself.provider = provider\nself.path = path\nself.description = description\ndef __call__(self, fn: Callable[[], str]):\nif self.description == \"\":\nself.description = fn.__doc__\nif self.name == \"\":\nself.name = fn.__name__\nself.__set_query(fn())\nfn.register_resources = self.register_resources\nreturn fn\ndef name_variant(self):\nreturn (self.name, self.variant)\ndef pandas(self):\n\"\"\"\n        Returns the local source as a pandas datafame.\n        Returns:\n        dataframe (pandas.Dataframe): A pandas Dataframe\n        \"\"\"\nreturn pd.read_csv(self.path)\ndef register_resources(\nself,\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\"\n):\n\"\"\"\n        Registers a features and/or labels that can be used in training sets or served.\n        **Examples**:\n        ``` py\n        average_user_transaction.register_resources(\n            entity=user,\n            entity_column=\"CustomerID\",\n            inference_store=local,\n            features=[\n                {\"name\": &lt;feature name&gt;, \"variant\": &lt;feature variant&gt;, \"column\": &lt;value column&gt;, \"type\": \"float32\"}, # Column Mapping\n            ],\n        )\n        ```\n        Args:\n            entity (Union[str, EntityRegistrar]): The name to reference the entity by when serving features\n            entity_column (str): The name of the column in the source to be used as the entity\n            owner (Union[str, UserRegistrar]): The owner of the resource(s)\n            inference_store (Union[str, OnlineProvider, FileStoreProvider]): Where to store the materialized feature for serving. (Use the local provider in Localmode)\n            features (List[ColumnMapping]): A list of column mappings to define the features\n            labels (List[ColumnMapping]): A list of column mappings to define the labels\n            timestamp_column: (str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness\n        Returns:\n            registrar (ResourceRegister): Registrar\n        \"\"\"\nreturn self.registrar.register_column_resources(\nsource=(self.name, self.variant),\nentity=entity,\nentity_column=entity_column,\nowner=owner,\ninference_store=inference_store,\nfeatures=features,\nlabels=labels,\ntimestamp_column=timestamp_column,\ndescription=self.description,\n)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalSource.pandas","title":"<code>pandas()</code>","text":"<p>Returns the local source as a pandas datafame.</p> <p>dataframe (pandas.Dataframe): A pandas Dataframe</p> Source code in <code>src/featureform/register.py</code> <pre><code>def pandas(self):\n\"\"\"\n    Returns the local source as a pandas datafame.\n    Returns:\n    dataframe (pandas.Dataframe): A pandas Dataframe\n    \"\"\"\nreturn pd.read_csv(self.path)\n</code></pre>"},{"location":"local/#src.featureform.register.LocalSource.register_resources","title":"<code>register_resources(entity, entity_column, owner='', inference_store='', features=None, labels=None, timestamp_column='')</code>","text":"<p>Registers a features and/or labels that can be used in training sets or served.</p> <p>Examples: <pre><code>average_user_transaction.register_resources(\nentity=user,\nentity_column=\"CustomerID\",\ninference_store=local,\nfeatures=[\n{\"name\": &lt;feature name&gt;, \"variant\": &lt;feature variant&gt;, \"column\": &lt;value column&gt;, \"type\": \"float32\"}, # Column Mapping\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Union[str, EntityRegistrar]</code> <p>The name to reference the entity by when serving features</p> required <code>entity_column</code> <code>str</code> <p>The name of the column in the source to be used as the entity</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>The owner of the resource(s)</p> <code>''</code> <code>inference_store</code> <code>Union[str, OnlineProvider, FileStoreProvider]</code> <p>Where to store the materialized feature for serving. (Use the local provider in Localmode)</p> <code>''</code> <code>features</code> <code>List[ColumnMapping]</code> <p>A list of column mappings to define the features</p> <code>None</code> <code>labels</code> <code>List[ColumnMapping]</code> <p>A list of column mappings to define the labels</p> <code>None</code> <code>timestamp_column</code> <code>str</code> <p>(str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness</p> <code>''</code> <p>Returns:</p> Name Type Description <code>registrar</code> <code>ResourceRegister</code> <p>Registrar</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_resources(\nself,\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\"\n):\n\"\"\"\n    Registers a features and/or labels that can be used in training sets or served.\n    **Examples**:\n    ``` py\n    average_user_transaction.register_resources(\n        entity=user,\n        entity_column=\"CustomerID\",\n        inference_store=local,\n        features=[\n            {\"name\": &lt;feature name&gt;, \"variant\": &lt;feature variant&gt;, \"column\": &lt;value column&gt;, \"type\": \"float32\"}, # Column Mapping\n        ],\n    )\n    ```\n    Args:\n        entity (Union[str, EntityRegistrar]): The name to reference the entity by when serving features\n        entity_column (str): The name of the column in the source to be used as the entity\n        owner (Union[str, UserRegistrar]): The owner of the resource(s)\n        inference_store (Union[str, OnlineProvider, FileStoreProvider]): Where to store the materialized feature for serving. (Use the local provider in Localmode)\n        features (List[ColumnMapping]): A list of column mappings to define the features\n        labels (List[ColumnMapping]): A list of column mappings to define the labels\n        timestamp_column: (str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness\n    Returns:\n        registrar (ResourceRegister): Registrar\n    \"\"\"\nreturn self.registrar.register_column_resources(\nsource=(self.name, self.variant),\nentity=entity,\nentity_column=entity_column,\nowner=owner,\ninference_store=inference_store,\nfeatures=features,\nlabels=labels,\ntimestamp_column=timestamp_column,\ndescription=self.description,\n)\n</code></pre>"},{"location":"register/","title":"Registering","text":""},{"location":"register/#src.featureform.register.ResourceClient","title":"<code>src.featureform.register.ResourceClient</code>","text":"<p>         Bases: <code>Registrar</code></p> <p>The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the Client functions instead.</p> <p>Using the Resource Client: definitions.py<pre><code>import featureform as ff\nfrom featureform import ResourceClient\nrc = ResourceClient(\"localhost:8000\")\n# example query:\nredis = rc.get_provider(\"redis-quickstart\")\n</code></pre></p> Source code in <code>src/featureform/register.py</code> <pre><code>class ResourceClient(Registrar):\n\"\"\"The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the [Client](client.md) functions instead.\n    **Using the Resource Client:**\n    ``` py title=\"definitions.py\"\n    import featureform as ff\n    from featureform import ResourceClient\n    rc = ResourceClient(\"localhost:8000\")\n    # example query:\n    redis = rc.get_provider(\"redis-quickstart\")\n    ```\n    \"\"\"\ndef __init__(self, host=None, local=False, insecure=False, cert_path=None, dry_run=False):\n\"\"\"Initialise a Resource Client object.\n        Args:\n            host (str): The hostname of the Featureform instance. Exclude if using Localmode.\n            local (bool): True if using Localmode.\n            insecure (bool): True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate\n            cert_path (str): The path to a public certificate if using a self-signed certificate.\n        \"\"\"\nsuper().__init__()\nself._dry_run = dry_run\nself._stub = None\nself.local = local\nif dry_run:\nreturn\nif local and host:\nraise ValueError(\"Cannot be local and have a host\")\nelif not local:\nhost = host or os.getenv('FEATUREFORM_HOST')\nif host is None:\nraise RuntimeError(\n'If not in local mode then `host` must be passed or the environment'\n' variable FEATUREFORM_HOST must be set.'\n)\nif insecure:\nchannel = insecure_channel(host)\nelse:\nchannel = secure_channel(host, cert_path)\nself._stub = ff_grpc.ApiStub(channel)\nself._host = host\ndef apply(self):\n\"\"\"Apply all definitions, creating and retrieving all specified resources.\n        \"\"\"\nif self._dry_run:\nprint(state().sorted_list())\nreturn\nif self.local:\nstate().create_all_local()\nelse:\nstate().create_all(self._stub)\ndef get_user(self, name, local=False):\n\"\"\"Get a user. Prints out name of user, and all resources associated with the user.\n        **Examples:**\n        ``` py title=\"Input\"\n        featureformer = rc.get_user(\"featureformer\")\n        ```\n        ``` json title=\"Output\"\n        // get_user prints out formatted information on user\n        USER NAME:                     featureformer\n        -----------------------------------------------\n        NAME                           VARIANT                        TYPE\n        avg_transactions               quickstart                     feature\n        fraudulent                     quickstart                     label\n        fraud_training                 quickstart                     training set\n        transactions                   kaggle                         source\n        average_user_transaction       quickstart                     source\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(featureformer)\n        ```\n        ``` json title=\"Output\"\n        // get_user returns the User object\n        name: \"featureformer\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        sources {\n        name: \"transactions\"\n        variant: \"kaggle\"\n        }\n        sources {\n        name: \"average_user_transaction\"\n        variant: \"quickstart\"\n        }\n        ```\n        Args:\n            name (str): Name of user to be retrieved\n        Returns:\n            user (User): User\n        \"\"\"\nif local:\nreturn get_user_info_local(name)\nreturn get_user_info(self._stub, name)\ndef get_entity(self, name, local=False):\n\"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity.\n        **Examples:**\n        ``` py title=\"Input\"\n        entity = rc.get_entity(\"user\")\n        ```\n        ``` json title=\"Output\"\n        // get_entity prints out formatted information on entity\n        ENTITY NAME:                   user\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        NAME                           VARIANT                        TYPE\n        avg_transactions               quickstart                     feature\n        fraudulent                     quickstart                     label\n        fraud_training                 quickstart                     training set\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(postgres)\n        ```\n        ``` json title=\"Output\"\n        // get_entity returns the Entity object\n        name: \"user\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        ```\n        \"\"\"\nif local:\nreturn get_entity_info_local(name)\nreturn get_entity_info(self._stub, name)\ndef get_model(self, name, local=False) -&gt; Model:\n\"\"\"Get a model. Prints out information on model, and all resources associated with the model.\n        Args:\n            name (str): Name of model to be retrieved\n        Returns:\n            model (Model): Model\n        \"\"\"\nif local:\nmodel = get_model_info_local(name)\nelse:\nmodel_proto = get_resource_info(self._stub, \"model\", name)\nif model_proto is None:\nmodel = None\nelse:\nmodel = Model(model_proto.name)\nreturn model\ndef get_provider(self, name, local=False):\n\"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider.\n        **Examples:**\n        ``` py title=\"Input\"\n        postgres = rc.get_provider(\"postgres-quickstart\")\n        ```\n        ``` json title=\"Output\"\n        // get_provider prints out formatted information on provider\n        NAME:                          postgres-quickstart\n        DESCRIPTION:                   A Postgres deployment we created for the Featureform quickstart\n        TYPE:                          POSTGRES_OFFLINE\n        SOFTWARE:                      postgres\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        SOURCES:\n        NAME                           VARIANT\n        transactions                   kaggle\n        average_user_transaction       quickstart\n        -----------------------------------------------\n        FEATURES:\n        NAME                           VARIANT\n        -----------------------------------------------\n        LABELS:\n        NAME                           VARIANT\n        fraudulent                     quickstart\n        -----------------------------------------------\n        TRAINING SETS:\n        NAME                           VARIANT\n        fraud_training                 quickstart\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(postgres)\n        ```\n        ``` json title=\"Output\"\n        // get_provider returns the Provider object\n        name: \"postgres-quickstart\"\n        description: \"A Postgres deployment we created for the Featureform quickstart\"\n        type: \"POSTGRES_OFFLINE\"\n        software: \"postgres\"\n        serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\",\n                            \\\"Port\\\": \\\"5432\\\",\n                            \\\"Username\\\": \\\"postgres\\\",\n                            \\\"Password\\\": \\\"password\\\",\n                            \\\"Database\\\": \\\"postgres\\\"}\"\n        sources {\n        name: \"transactions\"\n        variant: \"kaggle\"\n        }\n        sources {\n        name: \"average_user_transaction\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        ```\n        Args:\n            name (str): Name of provider to be retrieved\n        Returns:\n            provider (Provider): Provider\n        \"\"\"\nif local:\nreturn get_provider_info_local(name)\nreturn get_provider_info(self._stub, name)\ndef get_feature(self, name, variant):\nname_variant = metadata_pb2.NameVariant(name=name, variant=variant)\nfeature = None\nfor x in self._stub.GetFeatureVariants(iter([name_variant])):\nfeature = x\nbreak\nreturn Feature(\nname=feature.name,\nvariant=feature.variant,\nsource=(feature.source.name, feature.source.variant),\nvalue_type=feature.type,\nentity=feature.entity,\nowner=feature.owner,\nprovider=feature.provider,\nlocation=ResourceColumnMapping(\"\", \"\", \"\"),\ndescription=feature.description,\nstatus=feature.status.Status._enum_type.values[feature.status.status].name\n)\ndef print_feature(self, name, variant=None, local=False):\n\"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it.\n        **Examples:**\n        ``` py title=\"Input\"\n        avg_transactions = rc.get_feature(\"avg_transactions\")\n        ```\n        ``` json title=\"Output\"\n        // get_feature prints out formatted information on feature\n        NAME:                          avg_transactions\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        VARIANTS:\n        quickstart                     default\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(avg_transactions)\n        ```\n        ``` json title=\"Output\"\n        // get_feature returns the Feature object\n        name: \"avg_transactions\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        ```\n        ``` py title=\"Input\"\n        avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\")\n        ```\n        ``` json title=\"Output\"\n        // get_feature with variant provided prints out formatted information on feature variant\n        NAME:                          avg_transactions\n        VARIANT:                       quickstart\n        TYPE:                          float32\n        ENTITY:                        user\n        OWNER:                         featureformer\n        PROVIDER:                      redis-quickstart\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        SOURCE:\n        NAME                           VARIANT\n        average_user_transaction       quickstart\n        -----------------------------------------------\n        TRAINING SETS:\n        NAME                           VARIANT\n        fraud_training                 quickstart\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(avg_transactions_variant)\n        ```\n        ``` json title=\"Output\"\n        // get_feature returns the FeatureVariant object\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        source {\n        name: \"average_user_transaction\"\n        variant: \"quickstart\"\n        }\n        type: \"float32\"\n        entity: \"user\"\n        created {\n        seconds: 1658168552\n        nanos: 142461900\n        }\n        owner: \"featureformer\"\n        provider: \"redis-quickstart\"\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        columns {\n        entity: \"user_id\"\n        value: \"avg_transaction_amt\"\n        }\n        ```\n        Args:\n            name (str): Name of feature to be retrieved\n            variant (str): Name of variant of feature\n        Returns:\n            feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant\n        \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"feature\", name)\nreturn get_feature_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"feature\", name)\nreturn get_feature_variant_info(self._stub, name, variant)\ndef get_label(self, name, variant):\nname_variant = metadata_pb2.NameVariant(name=name, variant=variant)\nlabel = None\nfor x in self._stub.GetLabelVariants(iter([name_variant])):\nlabel = x\nbreak\nreturn Label(\nname=label.name,\nvariant=label.variant,\nsource=(label.source.name, label.source.variant),\nvalue_type=label.type,\nentity=label.entity,\nowner=label.owner,\nprovider=label.provider,\nlocation=ResourceColumnMapping(\"\", \"\", \"\"),\ndescription=label.description,\nstatus=label.status.Status._enum_type.values[label.status.status].name\n)\ndef print_label(self, name, variant=None, local=False):\n\"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it.\n        **Examples:**\n        ``` py title=\"Input\"\n        fraudulent = rc.get_label(\"fraudulent\")\n        ```\n        ``` json title=\"Output\"\n        // get_label prints out formatted information on label\n        NAME:                          fraudulent\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        VARIANTS:\n        quickstart                     default\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(fraudulent)\n        ```\n        ``` json title=\"Output\"\n        // get_label returns the Label object\n        name: \"fraudulent\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        ```\n        ``` py title=\"Input\"\n        fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\")\n        ```\n        ``` json title=\"Output\"\n        // get_label with variant provided prints out formatted information on label variant\n        NAME:                          fraudulent\n        VARIANT:                       quickstart\n        TYPE:                          bool\n        ENTITY:                        user\n        OWNER:                         featureformer\n        PROVIDER:                      postgres-quickstart\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        SOURCE:\n        NAME                           VARIANT\n        transactions                   kaggle\n        -----------------------------------------------\n        TRAINING SETS:\n        NAME                           VARIANT\n        fraud_training                 quickstart\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(fraudulent_variant)\n        ```\n        ``` json title=\"Output\"\n        // get_label returns the LabelVariant object\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        type: \"bool\"\n        source {\n        name: \"transactions\"\n        variant: \"kaggle\"\n        }\n        entity: \"user\"\n        created {\n        seconds: 1658168552\n        nanos: 154924300\n        }\n        owner: \"featureformer\"\n        provider: \"postgres-quickstart\"\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        columns {\n        entity: \"customerid\"\n        value: \"isfraud\"\n        }\n        ```\n        Args:\n            name (str): Name of label to be retrieved\n            variant (str): Name of variant of label\n        Returns:\n            label (Union[label, LabelVariant]): Label or LabelVariant\n        \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"label\", name)\nreturn get_label_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"label\", name)\nreturn get_label_variant_info(self._stub, name, variant)\ndef get_training_set(self, name, variant):\nname_variant = metadata_pb2.NameVariant(name=name, variant=variant)\nts = None\nfor x in self._stub.GetTrainingSetVariants(iter([name_variant])):\nts = x\nbreak\nreturn TrainingSet(\nname=ts.name,\nvariant=ts.variant,\nowner=ts.owner,\ndescription=ts.description,\nstatus=ts.status.Status._enum_type.values[ts.status.status].name,\nlabel=(ts.label.name, ts.label.variant),\nfeatures=[(f.name, f.variant) for f in ts.features],\nfeature_lags=[],\nprovider=ts.provider,\n)\ndef print_training_set(self, name, variant=None, local=False):\n\"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it.\n        **Examples:**\n        ``` py title=\"Input\"\n        fraud_training = rc.get_training_set(\"fraud_training\")\n        ```\n        ``` json title=\"Output\"\n        // get_training_set prints out formatted information on training set\n        NAME:                          fraud_training\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        VARIANTS:\n        quickstart                     default\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(fraud_training)\n        ```\n        ``` json title=\"Output\"\n        // get_training_set returns the TrainingSet object\n        name: \"fraud_training\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        ```\n        ``` py title=\"Input\"\n        fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\")\n        ```\n        ``` json title=\"Output\"\n        // get_training_set with variant provided prints out formatted information on training set variant\n        NAME:                          fraud_training\n        VARIANT:                       quickstart\n        OWNER:                         featureformer\n        PROVIDER:                      postgres-quickstart\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        LABEL:\n        NAME                           VARIANT\n        fraudulent                     quickstart\n        -----------------------------------------------\n        FEATURES:\n        NAME                           VARIANT\n        avg_transactions               quickstart\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(fraudulent_variant)\n        ```\n        ``` json title=\"Output\"\n        // get_training_set returns the TrainingSetVariant object\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        owner: \"featureformer\"\n        created {\n        seconds: 1658168552\n        nanos: 157934800\n        }\n        provider: \"postgres-quickstart\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        label {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        ```\n        Args:\n            name (str): Name of training set to be retrieved\n            variant (str): Name of variant of training set\n        Returns:\n            training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant\n        \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"training-set\", name)\nreturn get_training_set_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"training-set\", name)\nreturn get_training_set_variant_info(self._stub, name, variant)\ndef get_source(self, name, variant):\nname_variant = metadata_pb2.NameVariant(name=name, variant=variant)\nsource = None\nfor x in self._stub.GetSourceVariants(iter([name_variant])):\nsource = x\nbreak\ndefinition = self._get_source_definition(source)\nreturn Source(\nname=source.name,\ndefinition=definition,\nowner=source.owner,\nprovider=source.provider,\ndescription=source.description,\nvariant=source.variant,\nstatus=source.status.Status._enum_type.values[source.status.status].name,\n)\ndef _get_source_definition(self, source):\nif source.primaryData.table.name:\nreturn PrimaryData(\nLocation(source.primaryData.table.name)\n)\nelif source.transformation:\nreturn self._get_transformation_definition(source)\nelse:\nraise Exception(f\"Invalid source type {source}\")\ndef _get_transformation_definition(self, source):\nif source.transformation.DFTransformation.query != bytes():\ntransformation = source.transformation.DFTransformation\nreturn DFTransformation(\nquery=transformation.query,\ninputs=[(input.name, input.variant) for input in transformation.inputs]\n)\nelif source.transformation.SQLTransformation.query != \"\":\nreturn SQLTransformation(\nsource.transformation.SQLTransformation.query\n)\nelse:\nraise Exception(f\"Invalid transformation type {source}\")\ndef print_source(self, name, variant=None, local=False):\n\"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it.\n        **Examples:**\n        ``` py title=\"Input\"\n        transactions = rc.get_transactions(\"transactions\")\n        ```\n        ``` json title=\"Output\"\n        // get_source prints out formatted information on source\n        NAME:                          transactions\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        VARIANTS:\n        kaggle                         default\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(transactions)\n        ```\n        ``` json title=\"Output\"\n        // get_source returns the Source object\n        name: \"transactions\"\n        default_variant: \"kaggle\"\n        variants: \"kaggle\"\n        ```\n        ``` py title=\"Input\"\n        transactions_variant = rc.get_source(\"transactions\", \"kaggle\")\n        ```\n        ``` json title=\"Output\"\n        // get_source with variant provided prints out formatted information on source variant\n        NAME:                          transactions\n        VARIANT:                       kaggle\n        OWNER:                         featureformer\n        DESCRIPTION:                   Fraud Dataset From Kaggle\n        PROVIDER:                      postgres-quickstart\n        STATUS:                        NO_STATUS\n        -----------------------------------------------\n        DEFINITION:\n        TRANSFORMATION\n        -----------------------------------------------\n        SOURCES\n        NAME                           VARIANT\n        -----------------------------------------------\n        PRIMARY DATA\n        Transactions\n        FEATURES:\n        NAME                           VARIANT\n        -----------------------------------------------\n        LABELS:\n        NAME                           VARIANT\n        fraudulent                     quickstart\n        -----------------------------------------------\n        TRAINING SETS:\n        NAME                           VARIANT\n        fraud_training                 quickstart\n        -----------------------------------------------\n        ```\n        ``` py title=\"Input\"\n        print(transactions_variant)\n        ```\n        ``` json title=\"Output\"\n        // get_source returns the SourceVariant object\n        name: \"transactions\"\n        variant: \"kaggle\"\n        owner: \"featureformer\"\n        description: \"Fraud Dataset From Kaggle\"\n        provider: \"postgres-quickstart\"\n        created {\n        seconds: 1658168552\n        nanos: 128768000\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        primaryData {\n        table {\n            name: \"Transactions\"\n        }\n        }\n        ```\n        Args:\n            name (str): Name of source to be retrieved\n            variant (str): Name of variant of source\n        Returns:\n            source (Union[Source, SourceVariant]): Source or SourceVariant\n        \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"source\", name)\nreturn get_source_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"source\", name)\nreturn get_source_variant_info(self._stub, name, variant)\ndef list_features(self, local=False):\n\"\"\"List all features.\n        **Examples:**\n        ``` py title=\"Input\"\n        features_list = rc.list_features()\n        ```\n        ``` json title=\"Output\"\n        // list_features prints out formatted information on all features\n        NAME                           VARIANT                        STATUS\n        user_age                       quickstart (default)           READY\n        avg_transactions               quickstart (default)           READY\n        avg_transactions               production                     CREATED\n        ```\n        ``` py title=\"Input\"\n        print(features_list)\n        ```\n        ``` json title=\"Output\"\n        // list_features returns a list of Feature objects\n        [name: \"user_age\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        , name: \"avg_transactions\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        variants: \"production\"\n        ]\n        ```\n        Returns:\n            features (List[Feature]): List of Feature Objects\n        \"\"\"\nif local:\nreturn list_local(\"feature\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status(self._stub, \"feature\")\ndef list_labels(self, local=False):\n\"\"\"List all labels.\n        **Examples:**\n        ``` py title=\"Input\"\n        features_list = rc.list_labels()\n        ```\n        ``` json title=\"Output\"\n        // list_labels prints out formatted information on all labels\n        NAME                           VARIANT                        STATUS\n        user_age                       quickstart (default)           READY\n        avg_transactions               quickstart (default)           READY\n        avg_transactions               production                     CREATED\n        ```\n        ``` py title=\"Input\"\n        print(label_list)\n        ```\n        ``` json title=\"Output\"\n        // list_features returns a list of Feature objects\n        [name: \"user_age\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        , name: \"avg_transactions\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        variants: \"production\"\n        ]\n        ```\n        Returns:\n            labels (List[Label]): List of Label Objects\n        \"\"\"\nif local:\nreturn list_local(\"label\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status(self._stub, \"label\")\ndef list_users(self, local=False):\n\"\"\"List all users. Prints a list of all users.\n        **Examples:**\n        ``` py title=\"Input\"\n        users_list = rc.list_users()\n        ```\n        ``` json title=\"Output\"\n        // list_users prints out formatted information on all users\n        NAME                           STATUS\n        featureformer                  NO_STATUS\n        featureformers_friend          CREATED\n        ```\n        ``` py title=\"Input\"\n        print(features_list)\n        ```\n        ``` json title=\"Output\"\n        // list_features returns a list of Feature objects\n        [name: \"featureformer\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        sources {\n        name: \"transactions\"\n        variant: \"kaggle\"\n        }\n        sources {\n        name: \"average_user_transaction\"\n        variant: \"quickstart\"\n        },\n        name: \"featureformers_friend\"\n        features {\n        name: \"user_age\"\n        variant: \"production\"\n        }\n        sources {\n        name: \"user_profiles\"\n        variant: \"production\"\n        }\n        ]\n        ```\n        Returns:\n            users (List[User]): List of User Objects\n        \"\"\"\nif local:\nreturn list_local(\"user\", [ColumnName.NAME, ColumnName.STATUS])\nreturn list_name_status(self._stub, \"user\")\ndef list_entities(self, local=False):\n\"\"\"List all entities. Prints a list of all entities.\n        **Examples:**\n        ``` py title=\"Input\"\n        entities = rc.list_entities()\n        ```\n        ``` json title=\"Output\"\n        // list_entities prints out formatted information on all entities\n        NAME                           STATUS\n        user                           CREATED\n        transaction                    CREATED\n        ```\n        ``` py title=\"Input\"\n        print(features_list)\n        ```\n        ``` json title=\"Output\"\n        // list_entities returns a list of Entity objects\n        [name: \"user\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        features {\n        name: \"avg_transactions\"\n        variant: \"production\"\n        }\n        features {\n        name: \"user_age\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        ,\n        name: \"transaction\"\n        features {\n        name: \"amount_spent\"\n        variant: \"production\"\n        }\n        ]\n        ```\n        Returns:\n            entities (List[Entity]): List of Entity Objects\n        \"\"\"\nif local:\nreturn list_local(\"entity\", [ColumnName.NAME, ColumnName.STATUS])\nreturn list_name_status(self._stub, \"entity\")\ndef list_sources(self, local=False):\n\"\"\"List all sources. Prints a list of all sources.\n        **Examples:**\n        ``` py title=\"Input\"\n        sources_list = rc.list_sources()\n        ```\n        ``` json title=\"Output\"\n        // list_sources prints out formatted information on all sources\n        NAME                           VARIANT                        STATUS                         DESCRIPTION\n        average_user_transaction       quickstart (default)           NO_STATUS                      the average transaction amount for a user\n        transactions                   kaggle (default)               NO_STATUS                      Fraud Dataset From Kaggle\n        ```\n        ``` py title=\"Input\"\n        print(sources_list)\n        ```\n        ``` json title=\"Output\"\n        // list_sources returns a list of Source objects\n        [name: \"average_user_transaction\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\"\n        , name: \"transactions\"\n        default_variant: \"kaggle\"\n        variants: \"kaggle\"\n        ]\n        ```\n        Returns:\n            sources (List[Source]): List of Source Objects\n        \"\"\"\nif local:\nreturn list_local(\"source\",\n[ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS, ColumnName.DESCRIPTION])\nreturn list_name_variant_status_desc(self._stub, \"source\")\ndef list_training_sets(self, local=False):\n\"\"\"List all training sets. Prints a list of all training sets.\n        **Examples:**\n        ``` py title=\"Input\"\n        training_sets_list = rc.list_training_sets()\n        ```\n        ``` json title=\"Output\"\n        // list_training_sets prints out formatted information on all training sets\n        NAME                           VARIANT                        STATUS                         DESCRIPTION\n        fraud_training                 quickstart (default)           READY                          Training set for fraud detection.\n        fraud_training                 v2                             CREATED                        Improved training set for fraud detection.\n        recommender                    v1 (default)                   CREATED                        Training set for recommender system.\n        ```\n        ``` py title=\"Input\"\n        print(training_sets_list)\n        ```\n        ``` json title=\"Output\"\n        // list_training_sets returns a list of TrainingSet objects\n        [name: \"fraud_training\"\n        default_variant: \"quickstart\"\n        variants: \"quickstart\", \"v2\",\n        name: \"recommender\"\n        default_variant: \"v1\"\n        variants: \"v1\"\n        ]\n        ```\n        Returns:\n            training_sets (List[TrainingSet]): List of TrainingSet Objects\n        \"\"\"\nif local:\nreturn list_local(\"training-set\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status_desc(self._stub, \"training-set\")\ndef list_models(self, local=False) -&gt; List[Model]:\n\"\"\"List all models. Prints a list of all models.\n        Returns:\n            models (List[Model]): List of Model Objects\n        \"\"\"\nmodels = []\nif local:\nrows = list_local(\"model\", [ColumnName.NAME])\nmodels = [Model(row[\"name\"]) for row in rows]\nelse:\nmodel_protos = list_name(self._stub, \"model\")\nmodels = [Model(proto.name) for proto in model_protos]\nreturn models\ndef list_providers(self, local=False):\n\"\"\"List all providers. Prints a list of all providers.\n        **Examples:**\n        ``` py title=\"Input\"\n        providers_list = rc.list_providers()\n        ```\n        ``` json title=\"Output\"\n        // list_providers prints out formatted information on all providers\n        NAME                           STATUS                         DESCRIPTION\n        redis-quickstart               CREATED                      A Redis deployment we created for the Featureform quickstart\n        postgres-quickstart            CREATED                      A Postgres deployment we created for the Featureform quickst\n        ```\n        ``` py title=\"Input\"\n        print(providers_list)\n        ```\n        ``` json title=\"Output\"\n        // list_providers returns a list of Providers objects\n        [name: \"redis-quickstart\"\n        description: \"A Redis deployment we created for the Featureform quickstart\"\n        type: \"REDIS_ONLINE\"\n        software: \"redis\"\n        serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\"\n        features {\n        name: \"avg_transactions\"\n        variant: \"quickstart\"\n        }\n        features {\n        name: \"avg_transactions\"\n        variant: \"production\"\n        }\n        features {\n        name: \"user_age\"\n        variant: \"quickstart\"\n        }\n        , name: \"postgres-quickstart\"\n        description: \"A Postgres deployment we created for the Featureform quickstart\"\n        type: \"POSTGRES_OFFLINE\"\n        software: \"postgres\"\n        serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\"\n        sources {\n        name: \"transactions\"\n        variant: \"kaggle\"\n        }\n        sources {\n        name: \"average_user_transaction\"\n        variant: \"quickstart\"\n        }\n        trainingsets {\n        name: \"fraud_training\"\n        variant: \"quickstart\"\n        }\n        labels {\n        name: \"fraudulent\"\n        variant: \"quickstart\"\n        }\n        ]\n        ```\n        Returns:\n            providers (List[Provider]): List of Provider Objects\n        \"\"\"\nif local:\nreturn list_local(\"provider\", [ColumnName.NAME, ColumnName.STATUS, ColumnName.DESCRIPTION])\nreturn list_name_status_desc(self._stub, \"provider\")\ndef search(self, raw_query, local=False):\n\"\"\"Search for registered resources. Prints a list of results.\n        **Examples:**\n        ``` py title=\"Input\"\n        providers_list = rc.search(\"transact\")\n        ```\n        ``` json title=\"Output\"\n        // search prints out formatted information on all matches\n        NAME                           VARIANT            TYPE\n        avg_transactions               default            Source\n        ```\n        \"\"\"\nif type(raw_query) != str or len(raw_query) == 0:\nraise Exception(\"query must be string and cannot be empty\")\nprocessed_query = raw_query.translate({ ord(i): None for i in '.,-@!*#'})\nif local:\nreturn search_local(processed_query)\nelse:\nreturn search(processed_query, self._host)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.__init__","title":"<code>__init__(host=None, local=False, insecure=False, cert_path=None, dry_run=False)</code>","text":"<p>Initialise a Resource Client object.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The hostname of the Featureform instance. Exclude if using Localmode.</p> <code>None</code> <code>local</code> <code>bool</code> <p>True if using Localmode.</p> <code>False</code> <code>insecure</code> <code>bool</code> <p>True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate</p> <code>False</code> <code>cert_path</code> <code>str</code> <p>The path to a public certificate if using a self-signed certificate.</p> <code>None</code> Source code in <code>src/featureform/register.py</code> <pre><code>def __init__(self, host=None, local=False, insecure=False, cert_path=None, dry_run=False):\n\"\"\"Initialise a Resource Client object.\n    Args:\n        host (str): The hostname of the Featureform instance. Exclude if using Localmode.\n        local (bool): True if using Localmode.\n        insecure (bool): True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate\n        cert_path (str): The path to a public certificate if using a self-signed certificate.\n    \"\"\"\nsuper().__init__()\nself._dry_run = dry_run\nself._stub = None\nself.local = local\nif dry_run:\nreturn\nif local and host:\nraise ValueError(\"Cannot be local and have a host\")\nelif not local:\nhost = host or os.getenv('FEATUREFORM_HOST')\nif host is None:\nraise RuntimeError(\n'If not in local mode then `host` must be passed or the environment'\n' variable FEATUREFORM_HOST must be set.'\n)\nif insecure:\nchannel = insecure_channel(host)\nelse:\nchannel = secure_channel(host, cert_path)\nself._stub = ff_grpc.ApiStub(channel)\nself._host = host\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.apply","title":"<code>apply()</code>","text":"<p>Apply all definitions, creating and retrieving all specified resources.</p> Source code in <code>src/featureform/register.py</code> <pre><code>def apply(self):\n\"\"\"Apply all definitions, creating and retrieving all specified resources.\n    \"\"\"\nif self._dry_run:\nprint(state().sorted_list())\nreturn\nif self.local:\nstate().create_all_local()\nelse:\nstate().create_all(self._stub)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.get_entity","title":"<code>get_entity(name, local=False)</code>","text":"<p>Get an entity. Prints out information on entity, and all resources associated with the entity.</p> <p>Examples:</p> Input<pre><code>entity = rc.get_entity(\"user\")\n</code></pre> Output<pre><code>// get_entity prints out formatted information on entity\nENTITY NAME:                   user\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nNAME                           VARIANT                        TYPE\navg_transactions               quickstart                     feature\nfraudulent                     quickstart                     label\nfraud_training                 quickstart                     training set\n-----------------------------------------------\n</code></pre> Input<pre><code>print(postgres)\n</code></pre> Output<pre><code>// get_entity returns the Entity object\nname: \"user\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\n</code></pre> Source code in <code>src/featureform/register.py</code> <pre><code>def get_entity(self, name, local=False):\n\"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity.\n    **Examples:**\n    ``` py title=\"Input\"\n    entity = rc.get_entity(\"user\")\n    ```\n    ``` json title=\"Output\"\n    // get_entity prints out formatted information on entity\n    ENTITY NAME:                   user\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    NAME                           VARIANT                        TYPE\n    avg_transactions               quickstart                     feature\n    fraudulent                     quickstart                     label\n    fraud_training                 quickstart                     training set\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(postgres)\n    ```\n    ``` json title=\"Output\"\n    // get_entity returns the Entity object\n    name: \"user\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    ```\n    \"\"\"\nif local:\nreturn get_entity_info_local(name)\nreturn get_entity_info(self._stub, name)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.get_model","title":"<code>get_model(name, local=False)</code>","text":"<p>Get a model. Prints out information on model, and all resources associated with the model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of model to be retrieved</p> required <p>Returns:</p> Name Type Description <code>model</code> <code>Model</code> <p>Model</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_model(self, name, local=False) -&gt; Model:\n\"\"\"Get a model. Prints out information on model, and all resources associated with the model.\n    Args:\n        name (str): Name of model to be retrieved\n    Returns:\n        model (Model): Model\n    \"\"\"\nif local:\nmodel = get_model_info_local(name)\nelse:\nmodel_proto = get_resource_info(self._stub, \"model\", name)\nif model_proto is None:\nmodel = None\nelse:\nmodel = Model(model_proto.name)\nreturn model\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.get_provider","title":"<code>get_provider(name, local=False)</code>","text":"<p>Get a provider. Prints out information on provider, and all resources associated with the provider.</p> <p>Examples:</p> Input<pre><code>postgres = rc.get_provider(\"postgres-quickstart\")\n</code></pre> Output<pre><code>// get_provider prints out formatted information on provider\nNAME:                          postgres-quickstart\nDESCRIPTION:                   A Postgres deployment we created for the Featureform quickstart\nTYPE:                          POSTGRES_OFFLINE\nSOFTWARE:                      postgres\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nSOURCES:\nNAME                           VARIANT\ntransactions                   kaggle\naverage_user_transaction       quickstart\n-----------------------------------------------\nFEATURES:\nNAME                           VARIANT\n-----------------------------------------------\nLABELS:\nNAME                           VARIANT\nfraudulent                     quickstart\n-----------------------------------------------\nTRAINING SETS:\nNAME                           VARIANT\nfraud_training                 quickstart\n-----------------------------------------------\n</code></pre> Input<pre><code>print(postgres)\n</code></pre> Output<pre><code>// get_provider returns the Provider object\nname: \"postgres-quickstart\"\ndescription: \"A Postgres deployment we created for the Featureform quickstart\"\ntype: \"POSTGRES_OFFLINE\"\nsoftware: \"postgres\"\nserialized_config: \"{\"Host\": \"quickstart-postgres\",\n                    \"Port\": \"5432\",\n                    \"Username\": \"postgres\",\n                    \"Password\": \"password\",\n                    \"Database\": \"postgres\"}\"\nsources {\nname: \"transactions\"\nvariant: \"kaggle\"\n}\nsources {\nname: \"average_user_transaction\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>provider</code> <code>Provider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_provider(self, name, local=False):\n\"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider.\n    **Examples:**\n    ``` py title=\"Input\"\n    postgres = rc.get_provider(\"postgres-quickstart\")\n    ```\n    ``` json title=\"Output\"\n    // get_provider prints out formatted information on provider\n    NAME:                          postgres-quickstart\n    DESCRIPTION:                   A Postgres deployment we created for the Featureform quickstart\n    TYPE:                          POSTGRES_OFFLINE\n    SOFTWARE:                      postgres\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    SOURCES:\n    NAME                           VARIANT\n    transactions                   kaggle\n    average_user_transaction       quickstart\n    -----------------------------------------------\n    FEATURES:\n    NAME                           VARIANT\n    -----------------------------------------------\n    LABELS:\n    NAME                           VARIANT\n    fraudulent                     quickstart\n    -----------------------------------------------\n    TRAINING SETS:\n    NAME                           VARIANT\n    fraud_training                 quickstart\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(postgres)\n    ```\n    ``` json title=\"Output\"\n    // get_provider returns the Provider object\n    name: \"postgres-quickstart\"\n    description: \"A Postgres deployment we created for the Featureform quickstart\"\n    type: \"POSTGRES_OFFLINE\"\n    software: \"postgres\"\n    serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\",\n                        \\\"Port\\\": \\\"5432\\\",\n                        \\\"Username\\\": \\\"postgres\\\",\n                        \\\"Password\\\": \\\"password\\\",\n                        \\\"Database\\\": \\\"postgres\\\"}\"\n    sources {\n    name: \"transactions\"\n    variant: \"kaggle\"\n    }\n    sources {\n    name: \"average_user_transaction\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    ```\n    Args:\n        name (str): Name of provider to be retrieved\n    Returns:\n        provider (Provider): Provider\n    \"\"\"\nif local:\nreturn get_provider_info_local(name)\nreturn get_provider_info(self._stub, name)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.get_user","title":"<code>get_user(name, local=False)</code>","text":"<p>Get a user. Prints out name of user, and all resources associated with the user.</p> <p>Examples:</p> Input<pre><code>featureformer = rc.get_user(\"featureformer\")\n</code></pre> Output<pre><code>// get_user prints out formatted information on user\nUSER NAME:                     featureformer\n-----------------------------------------------\nNAME                           VARIANT                        TYPE\navg_transactions               quickstart                     feature\nfraudulent                     quickstart                     label\nfraud_training                 quickstart                     training set\ntransactions                   kaggle                         source\naverage_user_transaction       quickstart                     source\n-----------------------------------------------\n</code></pre> Input<pre><code>print(featureformer)\n</code></pre> Output<pre><code>// get_user returns the User object\nname: \"featureformer\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\nsources {\nname: \"transactions\"\nvariant: \"kaggle\"\n}\nsources {\nname: \"average_user_transaction\"\nvariant: \"quickstart\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of user to be retrieved</p> required <p>Returns:</p> Name Type Description <code>user</code> <code>User</code> <p>User</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_user(self, name, local=False):\n\"\"\"Get a user. Prints out name of user, and all resources associated with the user.\n    **Examples:**\n    ``` py title=\"Input\"\n    featureformer = rc.get_user(\"featureformer\")\n    ```\n    ``` json title=\"Output\"\n    // get_user prints out formatted information on user\n    USER NAME:                     featureformer\n    -----------------------------------------------\n    NAME                           VARIANT                        TYPE\n    avg_transactions               quickstart                     feature\n    fraudulent                     quickstart                     label\n    fraud_training                 quickstart                     training set\n    transactions                   kaggle                         source\n    average_user_transaction       quickstart                     source\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(featureformer)\n    ```\n    ``` json title=\"Output\"\n    // get_user returns the User object\n    name: \"featureformer\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    sources {\n    name: \"transactions\"\n    variant: \"kaggle\"\n    }\n    sources {\n    name: \"average_user_transaction\"\n    variant: \"quickstart\"\n    }\n    ```\n    Args:\n        name (str): Name of user to be retrieved\n    Returns:\n        user (User): User\n    \"\"\"\nif local:\nreturn get_user_info_local(name)\nreturn get_user_info(self._stub, name)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_entities","title":"<code>list_entities(local=False)</code>","text":"<p>List all entities. Prints a list of all entities.</p> <p>Examples: Input<pre><code>entities = rc.list_entities()\n</code></pre></p> Output<pre><code>// list_entities prints out formatted information on all entities\nNAME                           STATUS\nuser                           CREATED\ntransaction                    CREATED\n</code></pre> Input<pre><code>print(features_list)\n</code></pre> Output<pre><code>// list_entities returns a list of Entity objects\n[name: \"user\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nfeatures {\nname: \"avg_transactions\"\nvariant: \"production\"\n}\nfeatures {\nname: \"user_age\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\n,\nname: \"transaction\"\nfeatures {\nname: \"amount_spent\"\nvariant: \"production\"\n}\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>entities</code> <code>List[Entity]</code> <p>List of Entity Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_entities(self, local=False):\n\"\"\"List all entities. Prints a list of all entities.\n    **Examples:**\n    ``` py title=\"Input\"\n    entities = rc.list_entities()\n    ```\n    ``` json title=\"Output\"\n    // list_entities prints out formatted information on all entities\n    NAME                           STATUS\n    user                           CREATED\n    transaction                    CREATED\n    ```\n    ``` py title=\"Input\"\n    print(features_list)\n    ```\n    ``` json title=\"Output\"\n    // list_entities returns a list of Entity objects\n    [name: \"user\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    features {\n    name: \"avg_transactions\"\n    variant: \"production\"\n    }\n    features {\n    name: \"user_age\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    ,\n    name: \"transaction\"\n    features {\n    name: \"amount_spent\"\n    variant: \"production\"\n    }\n    ]\n    ```\n    Returns:\n        entities (List[Entity]): List of Entity Objects\n    \"\"\"\nif local:\nreturn list_local(\"entity\", [ColumnName.NAME, ColumnName.STATUS])\nreturn list_name_status(self._stub, \"entity\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_features","title":"<code>list_features(local=False)</code>","text":"<p>List all features.</p> <p>Examples: Input<pre><code>features_list = rc.list_features()\n</code></pre></p> Output<pre><code>// list_features prints out formatted information on all features\nNAME                           VARIANT                        STATUS\nuser_age                       quickstart (default)           READY\navg_transactions               quickstart (default)           READY\navg_transactions               production                     CREATED\n</code></pre> Input<pre><code>print(features_list)\n</code></pre> Output<pre><code>// list_features returns a list of Feature objects\n[name: \"user_age\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n, name: \"avg_transactions\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\nvariants: \"production\"\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>features</code> <code>List[Feature]</code> <p>List of Feature Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_features(self, local=False):\n\"\"\"List all features.\n    **Examples:**\n    ``` py title=\"Input\"\n    features_list = rc.list_features()\n    ```\n    ``` json title=\"Output\"\n    // list_features prints out formatted information on all features\n    NAME                           VARIANT                        STATUS\n    user_age                       quickstart (default)           READY\n    avg_transactions               quickstart (default)           READY\n    avg_transactions               production                     CREATED\n    ```\n    ``` py title=\"Input\"\n    print(features_list)\n    ```\n    ``` json title=\"Output\"\n    // list_features returns a list of Feature objects\n    [name: \"user_age\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    , name: \"avg_transactions\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    variants: \"production\"\n    ]\n    ```\n    Returns:\n        features (List[Feature]): List of Feature Objects\n    \"\"\"\nif local:\nreturn list_local(\"feature\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status(self._stub, \"feature\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_labels","title":"<code>list_labels(local=False)</code>","text":"<p>List all labels.</p> <p>Examples: Input<pre><code>features_list = rc.list_labels()\n</code></pre></p> Output<pre><code>// list_labels prints out formatted information on all labels\nNAME                           VARIANT                        STATUS\nuser_age                       quickstart (default)           READY\navg_transactions               quickstart (default)           READY\navg_transactions               production                     CREATED\n</code></pre> Input<pre><code>print(label_list)\n</code></pre> Output<pre><code>// list_features returns a list of Feature objects\n[name: \"user_age\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n, name: \"avg_transactions\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\nvariants: \"production\"\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>labels</code> <code>List[Label]</code> <p>List of Label Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_labels(self, local=False):\n\"\"\"List all labels.\n    **Examples:**\n    ``` py title=\"Input\"\n    features_list = rc.list_labels()\n    ```\n    ``` json title=\"Output\"\n    // list_labels prints out formatted information on all labels\n    NAME                           VARIANT                        STATUS\n    user_age                       quickstart (default)           READY\n    avg_transactions               quickstart (default)           READY\n    avg_transactions               production                     CREATED\n    ```\n    ``` py title=\"Input\"\n    print(label_list)\n    ```\n    ``` json title=\"Output\"\n    // list_features returns a list of Feature objects\n    [name: \"user_age\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    , name: \"avg_transactions\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    variants: \"production\"\n    ]\n    ```\n    Returns:\n        labels (List[Label]): List of Label Objects\n    \"\"\"\nif local:\nreturn list_local(\"label\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status(self._stub, \"label\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_models","title":"<code>list_models(local=False)</code>","text":"<p>List all models. Prints a list of all models.</p> <p>Returns:</p> Name Type Description <code>models</code> <code>List[Model]</code> <p>List of Model Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_models(self, local=False) -&gt; List[Model]:\n\"\"\"List all models. Prints a list of all models.\n    Returns:\n        models (List[Model]): List of Model Objects\n    \"\"\"\nmodels = []\nif local:\nrows = list_local(\"model\", [ColumnName.NAME])\nmodels = [Model(row[\"name\"]) for row in rows]\nelse:\nmodel_protos = list_name(self._stub, \"model\")\nmodels = [Model(proto.name) for proto in model_protos]\nreturn models\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_providers","title":"<code>list_providers(local=False)</code>","text":"<p>List all providers. Prints a list of all providers.</p> <p>Examples: Input<pre><code>providers_list = rc.list_providers()\n</code></pre></p> Output<pre><code>// list_providers prints out formatted information on all providers\nNAME                           STATUS                         DESCRIPTION\nredis-quickstart               CREATED                      A Redis deployment we created for the Featureform quickstart\npostgres-quickstart            CREATED                      A Postgres deployment we created for the Featureform quickst\n</code></pre> Input<pre><code>print(providers_list)\n</code></pre> Output<pre><code>// list_providers returns a list of Providers objects\n[name: \"redis-quickstart\"\ndescription: \"A Redis deployment we created for the Featureform quickstart\"\ntype: \"REDIS_ONLINE\"\nsoftware: \"redis\"\nserialized_config: \"{\"Addr\": \"quickstart-redis:6379\", \"Password\": \"\", \"DB\": 0}\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nfeatures {\nname: \"avg_transactions\"\nvariant: \"production\"\n}\nfeatures {\nname: \"user_age\"\nvariant: \"quickstart\"\n}\n, name: \"postgres-quickstart\"\ndescription: \"A Postgres deployment we created for the Featureform quickstart\"\ntype: \"POSTGRES_OFFLINE\"\nsoftware: \"postgres\"\nserialized_config: \"{\"Host\": \"quickstart-postgres\", \"Port\": \"5432\", \"Username\": \"postgres\", \"Password\": \"password\", \"Database\": \"postgres\"}\"\nsources {\nname: \"transactions\"\nvariant: \"kaggle\"\n}\nsources {\nname: \"average_user_transaction\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>providers</code> <code>List[Provider]</code> <p>List of Provider Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_providers(self, local=False):\n\"\"\"List all providers. Prints a list of all providers.\n    **Examples:**\n    ``` py title=\"Input\"\n    providers_list = rc.list_providers()\n    ```\n    ``` json title=\"Output\"\n    // list_providers prints out formatted information on all providers\n    NAME                           STATUS                         DESCRIPTION\n    redis-quickstart               CREATED                      A Redis deployment we created for the Featureform quickstart\n    postgres-quickstart            CREATED                      A Postgres deployment we created for the Featureform quickst\n    ```\n    ``` py title=\"Input\"\n    print(providers_list)\n    ```\n    ``` json title=\"Output\"\n    // list_providers returns a list of Providers objects\n    [name: \"redis-quickstart\"\n    description: \"A Redis deployment we created for the Featureform quickstart\"\n    type: \"REDIS_ONLINE\"\n    software: \"redis\"\n    serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    features {\n    name: \"avg_transactions\"\n    variant: \"production\"\n    }\n    features {\n    name: \"user_age\"\n    variant: \"quickstart\"\n    }\n    , name: \"postgres-quickstart\"\n    description: \"A Postgres deployment we created for the Featureform quickstart\"\n    type: \"POSTGRES_OFFLINE\"\n    software: \"postgres\"\n    serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\"\n    sources {\n    name: \"transactions\"\n    variant: \"kaggle\"\n    }\n    sources {\n    name: \"average_user_transaction\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    ]\n    ```\n    Returns:\n        providers (List[Provider]): List of Provider Objects\n    \"\"\"\nif local:\nreturn list_local(\"provider\", [ColumnName.NAME, ColumnName.STATUS, ColumnName.DESCRIPTION])\nreturn list_name_status_desc(self._stub, \"provider\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_sources","title":"<code>list_sources(local=False)</code>","text":"<p>List all sources. Prints a list of all sources.</p> <p>Examples: Input<pre><code>sources_list = rc.list_sources()\n</code></pre></p> Output<pre><code>// list_sources prints out formatted information on all sources\nNAME                           VARIANT                        STATUS                         DESCRIPTION\naverage_user_transaction       quickstart (default)           NO_STATUS                      the average transaction amount for a user\ntransactions                   kaggle (default)               NO_STATUS                      Fraud Dataset From Kaggle\n</code></pre> Input<pre><code>print(sources_list)\n</code></pre> Output<pre><code>// list_sources returns a list of Source objects\n[name: \"average_user_transaction\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n, name: \"transactions\"\ndefault_variant: \"kaggle\"\nvariants: \"kaggle\"\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>sources</code> <code>List[Source]</code> <p>List of Source Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_sources(self, local=False):\n\"\"\"List all sources. Prints a list of all sources.\n    **Examples:**\n    ``` py title=\"Input\"\n    sources_list = rc.list_sources()\n    ```\n    ``` json title=\"Output\"\n    // list_sources prints out formatted information on all sources\n    NAME                           VARIANT                        STATUS                         DESCRIPTION\n    average_user_transaction       quickstart (default)           NO_STATUS                      the average transaction amount for a user\n    transactions                   kaggle (default)               NO_STATUS                      Fraud Dataset From Kaggle\n    ```\n    ``` py title=\"Input\"\n    print(sources_list)\n    ```\n    ``` json title=\"Output\"\n    // list_sources returns a list of Source objects\n    [name: \"average_user_transaction\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    , name: \"transactions\"\n    default_variant: \"kaggle\"\n    variants: \"kaggle\"\n    ]\n    ```\n    Returns:\n        sources (List[Source]): List of Source Objects\n    \"\"\"\nif local:\nreturn list_local(\"source\",\n[ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS, ColumnName.DESCRIPTION])\nreturn list_name_variant_status_desc(self._stub, \"source\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_training_sets","title":"<code>list_training_sets(local=False)</code>","text":"<p>List all training sets. Prints a list of all training sets.</p> <p>Examples: Input<pre><code>training_sets_list = rc.list_training_sets()\n</code></pre></p> Output<pre><code>// list_training_sets prints out formatted information on all training sets\nNAME                           VARIANT                        STATUS                         DESCRIPTION\nfraud_training                 quickstart (default)           READY                          Training set for fraud detection.\nfraud_training                 v2                             CREATED                        Improved training set for fraud detection.\nrecommender                    v1 (default)                   CREATED                        Training set for recommender system.\n</code></pre> Input<pre><code>print(training_sets_list)\n</code></pre> Output<pre><code>// list_training_sets returns a list of TrainingSet objects\n[name: \"fraud_training\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\", \"v2\",\nname: \"recommender\"\ndefault_variant: \"v1\"\nvariants: \"v1\"\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>training_sets</code> <code>List[TrainingSet]</code> <p>List of TrainingSet Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_training_sets(self, local=False):\n\"\"\"List all training sets. Prints a list of all training sets.\n    **Examples:**\n    ``` py title=\"Input\"\n    training_sets_list = rc.list_training_sets()\n    ```\n    ``` json title=\"Output\"\n    // list_training_sets prints out formatted information on all training sets\n    NAME                           VARIANT                        STATUS                         DESCRIPTION\n    fraud_training                 quickstart (default)           READY                          Training set for fraud detection.\n    fraud_training                 v2                             CREATED                        Improved training set for fraud detection.\n    recommender                    v1 (default)                   CREATED                        Training set for recommender system.\n    ```\n    ``` py title=\"Input\"\n    print(training_sets_list)\n    ```\n    ``` json title=\"Output\"\n    // list_training_sets returns a list of TrainingSet objects\n    [name: \"fraud_training\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\", \"v2\",\n    name: \"recommender\"\n    default_variant: \"v1\"\n    variants: \"v1\"\n    ]\n    ```\n    Returns:\n        training_sets (List[TrainingSet]): List of TrainingSet Objects\n    \"\"\"\nif local:\nreturn list_local(\"training-set\", [ColumnName.NAME, ColumnName.VARIANT, ColumnName.STATUS])\nreturn list_name_variant_status_desc(self._stub, \"training-set\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.list_users","title":"<code>list_users(local=False)</code>","text":"<p>List all users. Prints a list of all users.</p> <p>Examples: Input<pre><code>users_list = rc.list_users()\n</code></pre></p> Output<pre><code>// list_users prints out formatted information on all users\nNAME                           STATUS\nfeatureformer                  NO_STATUS\nfeatureformers_friend          CREATED\n</code></pre> Input<pre><code>print(features_list)\n</code></pre> Output<pre><code>// list_features returns a list of Feature objects\n[name: \"featureformer\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\nsources {\nname: \"transactions\"\nvariant: \"kaggle\"\n}\nsources {\nname: \"average_user_transaction\"\nvariant: \"quickstart\"\n},\nname: \"featureformers_friend\"\nfeatures {\nname: \"user_age\"\nvariant: \"production\"\n}\nsources {\nname: \"user_profiles\"\nvariant: \"production\"\n}\n]\n</code></pre> <p>Returns:</p> Name Type Description <code>users</code> <code>List[User]</code> <p>List of User Objects</p> Source code in <code>src/featureform/register.py</code> <pre><code>def list_users(self, local=False):\n\"\"\"List all users. Prints a list of all users.\n    **Examples:**\n    ``` py title=\"Input\"\n    users_list = rc.list_users()\n    ```\n    ``` json title=\"Output\"\n    // list_users prints out formatted information on all users\n    NAME                           STATUS\n    featureformer                  NO_STATUS\n    featureformers_friend          CREATED\n    ```\n    ``` py title=\"Input\"\n    print(features_list)\n    ```\n    ``` json title=\"Output\"\n    // list_features returns a list of Feature objects\n    [name: \"featureformer\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    sources {\n    name: \"transactions\"\n    variant: \"kaggle\"\n    }\n    sources {\n    name: \"average_user_transaction\"\n    variant: \"quickstart\"\n    },\n    name: \"featureformers_friend\"\n    features {\n    name: \"user_age\"\n    variant: \"production\"\n    }\n    sources {\n    name: \"user_profiles\"\n    variant: \"production\"\n    }\n    ]\n    ```\n    Returns:\n        users (List[User]): List of User Objects\n    \"\"\"\nif local:\nreturn list_local(\"user\", [ColumnName.NAME, ColumnName.STATUS])\nreturn list_name_status(self._stub, \"user\")\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.print_feature","title":"<code>print_feature(name, variant=None, local=False)</code>","text":"<p>Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it.</p> <p>Examples:</p> Input<pre><code>avg_transactions = rc.get_feature(\"avg_transactions\")\n</code></pre> Output<pre><code>// get_feature prints out formatted information on feature\nNAME:                          avg_transactions\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nVARIANTS:\nquickstart                     default\n-----------------------------------------------\n</code></pre> Input<pre><code>print(avg_transactions)\n</code></pre> Output<pre><code>// get_feature returns the Feature object\nname: \"avg_transactions\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n</code></pre> Input<pre><code>avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\")\n</code></pre> Output<pre><code>// get_feature with variant provided prints out formatted information on feature variant\nNAME:                          avg_transactions\nVARIANT:                       quickstart\nTYPE:                          float32\nENTITY:                        user\nOWNER:                         featureformer\nPROVIDER:                      redis-quickstart\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nSOURCE:\nNAME                           VARIANT\naverage_user_transaction       quickstart\n-----------------------------------------------\nTRAINING SETS:\nNAME                           VARIANT\nfraud_training                 quickstart\n-----------------------------------------------\n</code></pre> Input<pre><code>print(avg_transactions_variant)\n</code></pre> Output<pre><code>// get_feature returns the FeatureVariant object\nname: \"avg_transactions\"\nvariant: \"quickstart\"\nsource {\nname: \"average_user_transaction\"\nvariant: \"quickstart\"\n}\ntype: \"float32\"\nentity: \"user\"\ncreated {\nseconds: 1658168552\nnanos: 142461900\n}\nowner: \"featureformer\"\nprovider: \"redis-quickstart\"\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\ncolumns {\nentity: \"user_id\"\nvalue: \"avg_transaction_amt\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of feature to be retrieved</p> required <code>variant</code> <code>str</code> <p>Name of variant of feature</p> <code>None</code> <p>Returns:</p> Name Type Description <code>feature</code> <code>Union[Feature, FeatureVariant]</code> <p>Feature or FeatureVariant</p> Source code in <code>src/featureform/register.py</code> <pre><code>def print_feature(self, name, variant=None, local=False):\n\"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it.\n    **Examples:**\n    ``` py title=\"Input\"\n    avg_transactions = rc.get_feature(\"avg_transactions\")\n    ```\n    ``` json title=\"Output\"\n    // get_feature prints out formatted information on feature\n    NAME:                          avg_transactions\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    VARIANTS:\n    quickstart                     default\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(avg_transactions)\n    ```\n    ``` json title=\"Output\"\n    // get_feature returns the Feature object\n    name: \"avg_transactions\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    ```\n    ``` py title=\"Input\"\n    avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\")\n    ```\n    ``` json title=\"Output\"\n    // get_feature with variant provided prints out formatted information on feature variant\n    NAME:                          avg_transactions\n    VARIANT:                       quickstart\n    TYPE:                          float32\n    ENTITY:                        user\n    OWNER:                         featureformer\n    PROVIDER:                      redis-quickstart\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    SOURCE:\n    NAME                           VARIANT\n    average_user_transaction       quickstart\n    -----------------------------------------------\n    TRAINING SETS:\n    NAME                           VARIANT\n    fraud_training                 quickstart\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(avg_transactions_variant)\n    ```\n    ``` json title=\"Output\"\n    // get_feature returns the FeatureVariant object\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    source {\n    name: \"average_user_transaction\"\n    variant: \"quickstart\"\n    }\n    type: \"float32\"\n    entity: \"user\"\n    created {\n    seconds: 1658168552\n    nanos: 142461900\n    }\n    owner: \"featureformer\"\n    provider: \"redis-quickstart\"\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    columns {\n    entity: \"user_id\"\n    value: \"avg_transaction_amt\"\n    }\n    ```\n    Args:\n        name (str): Name of feature to be retrieved\n        variant (str): Name of variant of feature\n    Returns:\n        feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant\n    \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"feature\", name)\nreturn get_feature_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"feature\", name)\nreturn get_feature_variant_info(self._stub, name, variant)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.print_label","title":"<code>print_label(name, variant=None, local=False)</code>","text":"<p>Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it.</p> <p>Examples:</p> Input<pre><code>fraudulent = rc.get_label(\"fraudulent\")\n</code></pre> Output<pre><code>// get_label prints out formatted information on label\nNAME:                          fraudulent\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nVARIANTS:\nquickstart                     default\n-----------------------------------------------\n</code></pre> Input<pre><code>print(fraudulent)\n</code></pre> Output<pre><code>// get_label returns the Label object\nname: \"fraudulent\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n</code></pre> Input<pre><code>fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\")\n</code></pre> Output<pre><code>// get_label with variant provided prints out formatted information on label variant\nNAME:                          fraudulent\nVARIANT:                       quickstart\nTYPE:                          bool\nENTITY:                        user\nOWNER:                         featureformer\nPROVIDER:                      postgres-quickstart\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nSOURCE:\nNAME                           VARIANT\ntransactions                   kaggle\n-----------------------------------------------\nTRAINING SETS:\nNAME                           VARIANT\nfraud_training                 quickstart\n-----------------------------------------------\n</code></pre> Input<pre><code>print(fraudulent_variant)\n</code></pre> Output<pre><code>// get_label returns the LabelVariant object\nname: \"fraudulent\"\nvariant: \"quickstart\"\ntype: \"bool\"\nsource {\nname: \"transactions\"\nvariant: \"kaggle\"\n}\nentity: \"user\"\ncreated {\nseconds: 1658168552\nnanos: 154924300\n}\nowner: \"featureformer\"\nprovider: \"postgres-quickstart\"\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\ncolumns {\nentity: \"customerid\"\nvalue: \"isfraud\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of label to be retrieved</p> required <code>variant</code> <code>str</code> <p>Name of variant of label</p> <code>None</code> <p>Returns:</p> Name Type Description <code>label</code> <code>Union[label, LabelVariant]</code> <p>Label or LabelVariant</p> Source code in <code>src/featureform/register.py</code> <pre><code>def print_label(self, name, variant=None, local=False):\n\"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it.\n    **Examples:**\n    ``` py title=\"Input\"\n    fraudulent = rc.get_label(\"fraudulent\")\n    ```\n    ``` json title=\"Output\"\n    // get_label prints out formatted information on label\n    NAME:                          fraudulent\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    VARIANTS:\n    quickstart                     default\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(fraudulent)\n    ```\n    ``` json title=\"Output\"\n    // get_label returns the Label object\n    name: \"fraudulent\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    ```\n    ``` py title=\"Input\"\n    fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\")\n    ```\n    ``` json title=\"Output\"\n    // get_label with variant provided prints out formatted information on label variant\n    NAME:                          fraudulent\n    VARIANT:                       quickstart\n    TYPE:                          bool\n    ENTITY:                        user\n    OWNER:                         featureformer\n    PROVIDER:                      postgres-quickstart\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    SOURCE:\n    NAME                           VARIANT\n    transactions                   kaggle\n    -----------------------------------------------\n    TRAINING SETS:\n    NAME                           VARIANT\n    fraud_training                 quickstart\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(fraudulent_variant)\n    ```\n    ``` json title=\"Output\"\n    // get_label returns the LabelVariant object\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    type: \"bool\"\n    source {\n    name: \"transactions\"\n    variant: \"kaggle\"\n    }\n    entity: \"user\"\n    created {\n    seconds: 1658168552\n    nanos: 154924300\n    }\n    owner: \"featureformer\"\n    provider: \"postgres-quickstart\"\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    columns {\n    entity: \"customerid\"\n    value: \"isfraud\"\n    }\n    ```\n    Args:\n        name (str): Name of label to be retrieved\n        variant (str): Name of variant of label\n    Returns:\n        label (Union[label, LabelVariant]): Label or LabelVariant\n    \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"label\", name)\nreturn get_label_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"label\", name)\nreturn get_label_variant_info(self._stub, name, variant)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.print_source","title":"<code>print_source(name, variant=None, local=False)</code>","text":"<p>Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it.</p> <p>Examples:</p> Input<pre><code>transactions = rc.get_transactions(\"transactions\")\n</code></pre> Output<pre><code>// get_source prints out formatted information on source\nNAME:                          transactions\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nVARIANTS:\nkaggle                         default\n-----------------------------------------------\n</code></pre> Input<pre><code>print(transactions)\n</code></pre> Output<pre><code>// get_source returns the Source object\nname: \"transactions\"\ndefault_variant: \"kaggle\"\nvariants: \"kaggle\"\n</code></pre> Input<pre><code>transactions_variant = rc.get_source(\"transactions\", \"kaggle\")\n</code></pre> Output<pre><code>// get_source with variant provided prints out formatted information on source variant\nNAME:                          transactions\nVARIANT:                       kaggle\nOWNER:                         featureformer\nDESCRIPTION:                   Fraud Dataset From Kaggle\nPROVIDER:                      postgres-quickstart\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nDEFINITION:\nTRANSFORMATION\n-----------------------------------------------\nSOURCES\nNAME                           VARIANT\n-----------------------------------------------\nPRIMARY DATA\nTransactions\nFEATURES:\nNAME                           VARIANT\n-----------------------------------------------\nLABELS:\nNAME                           VARIANT\nfraudulent                     quickstart\n-----------------------------------------------\nTRAINING SETS:\nNAME                           VARIANT\nfraud_training                 quickstart\n-----------------------------------------------\n</code></pre> Input<pre><code>print(transactions_variant)\n</code></pre> Output<pre><code>// get_source returns the SourceVariant object\nname: \"transactions\"\nvariant: \"kaggle\"\nowner: \"featureformer\"\ndescription: \"Fraud Dataset From Kaggle\"\nprovider: \"postgres-quickstart\"\ncreated {\nseconds: 1658168552\nnanos: 128768000\n}\ntrainingsets {\nname: \"fraud_training\"\nvariant: \"quickstart\"\n}\nlabels {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\nprimaryData {\ntable {\nname: \"Transactions\"\n}\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source to be retrieved</p> required <code>variant</code> <code>str</code> <p>Name of variant of source</p> <code>None</code> <p>Returns:</p> Name Type Description <code>source</code> <code>Union[Source, SourceVariant]</code> <p>Source or SourceVariant</p> Source code in <code>src/featureform/register.py</code> <pre><code>def print_source(self, name, variant=None, local=False):\n\"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it.\n    **Examples:**\n    ``` py title=\"Input\"\n    transactions = rc.get_transactions(\"transactions\")\n    ```\n    ``` json title=\"Output\"\n    // get_source prints out formatted information on source\n    NAME:                          transactions\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    VARIANTS:\n    kaggle                         default\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(transactions)\n    ```\n    ``` json title=\"Output\"\n    // get_source returns the Source object\n    name: \"transactions\"\n    default_variant: \"kaggle\"\n    variants: \"kaggle\"\n    ```\n    ``` py title=\"Input\"\n    transactions_variant = rc.get_source(\"transactions\", \"kaggle\")\n    ```\n    ``` json title=\"Output\"\n    // get_source with variant provided prints out formatted information on source variant\n    NAME:                          transactions\n    VARIANT:                       kaggle\n    OWNER:                         featureformer\n    DESCRIPTION:                   Fraud Dataset From Kaggle\n    PROVIDER:                      postgres-quickstart\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    DEFINITION:\n    TRANSFORMATION\n    -----------------------------------------------\n    SOURCES\n    NAME                           VARIANT\n    -----------------------------------------------\n    PRIMARY DATA\n    Transactions\n    FEATURES:\n    NAME                           VARIANT\n    -----------------------------------------------\n    LABELS:\n    NAME                           VARIANT\n    fraudulent                     quickstart\n    -----------------------------------------------\n    TRAINING SETS:\n    NAME                           VARIANT\n    fraud_training                 quickstart\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(transactions_variant)\n    ```\n    ``` json title=\"Output\"\n    // get_source returns the SourceVariant object\n    name: \"transactions\"\n    variant: \"kaggle\"\n    owner: \"featureformer\"\n    description: \"Fraud Dataset From Kaggle\"\n    provider: \"postgres-quickstart\"\n    created {\n    seconds: 1658168552\n    nanos: 128768000\n    }\n    trainingsets {\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    }\n    labels {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    primaryData {\n    table {\n        name: \"Transactions\"\n    }\n    }\n    ```\n    Args:\n        name (str): Name of source to be retrieved\n        variant (str): Name of variant of source\n    Returns:\n        source (Union[Source, SourceVariant]): Source or SourceVariant\n    \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"source\", name)\nreturn get_source_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"source\", name)\nreturn get_source_variant_info(self._stub, name, variant)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.print_training_set","title":"<code>print_training_set(name, variant=None, local=False)</code>","text":"<p>Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it.</p> <p>Examples:</p> Input<pre><code>fraud_training = rc.get_training_set(\"fraud_training\")\n</code></pre> Output<pre><code>// get_training_set prints out formatted information on training set\nNAME:                          fraud_training\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nVARIANTS:\nquickstart                     default\n-----------------------------------------------\n</code></pre> Input<pre><code>print(fraud_training)\n</code></pre> Output<pre><code>// get_training_set returns the TrainingSet object\nname: \"fraud_training\"\ndefault_variant: \"quickstart\"\nvariants: \"quickstart\"\n</code></pre> Input<pre><code>fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\")\n</code></pre> Output<pre><code>// get_training_set with variant provided prints out formatted information on training set variant\nNAME:                          fraud_training\nVARIANT:                       quickstart\nOWNER:                         featureformer\nPROVIDER:                      postgres-quickstart\nSTATUS:                        NO_STATUS\n-----------------------------------------------\nLABEL:\nNAME                           VARIANT\nfraudulent                     quickstart\n-----------------------------------------------\nFEATURES:\nNAME                           VARIANT\navg_transactions               quickstart\n-----------------------------------------------\n</code></pre> Input<pre><code>print(fraudulent_variant)\n</code></pre> Output<pre><code>// get_training_set returns the TrainingSetVariant object\nname: \"fraud_training\"\nvariant: \"quickstart\"\nowner: \"featureformer\"\ncreated {\nseconds: 1658168552\nnanos: 157934800\n}\nprovider: \"postgres-quickstart\"\nfeatures {\nname: \"avg_transactions\"\nvariant: \"quickstart\"\n}\nlabel {\nname: \"fraudulent\"\nvariant: \"quickstart\"\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of training set to be retrieved</p> required <code>variant</code> <code>str</code> <p>Name of variant of training set</p> <code>None</code> <p>Returns:</p> Name Type Description <code>training_set</code> <code>Union[TrainingSet, TrainingSetVariant]</code> <p>TrainingSet or TrainingSetVariant</p> Source code in <code>src/featureform/register.py</code> <pre><code>def print_training_set(self, name, variant=None, local=False):\n\"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it.\n    **Examples:**\n    ``` py title=\"Input\"\n    fraud_training = rc.get_training_set(\"fraud_training\")\n    ```\n    ``` json title=\"Output\"\n    // get_training_set prints out formatted information on training set\n    NAME:                          fraud_training\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    VARIANTS:\n    quickstart                     default\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(fraud_training)\n    ```\n    ``` json title=\"Output\"\n    // get_training_set returns the TrainingSet object\n    name: \"fraud_training\"\n    default_variant: \"quickstart\"\n    variants: \"quickstart\"\n    ```\n    ``` py title=\"Input\"\n    fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\")\n    ```\n    ``` json title=\"Output\"\n    // get_training_set with variant provided prints out formatted information on training set variant\n    NAME:                          fraud_training\n    VARIANT:                       quickstart\n    OWNER:                         featureformer\n    PROVIDER:                      postgres-quickstart\n    STATUS:                        NO_STATUS\n    -----------------------------------------------\n    LABEL:\n    NAME                           VARIANT\n    fraudulent                     quickstart\n    -----------------------------------------------\n    FEATURES:\n    NAME                           VARIANT\n    avg_transactions               quickstart\n    -----------------------------------------------\n    ```\n    ``` py title=\"Input\"\n    print(fraudulent_variant)\n    ```\n    ``` json title=\"Output\"\n    // get_training_set returns the TrainingSetVariant object\n    name: \"fraud_training\"\n    variant: \"quickstart\"\n    owner: \"featureformer\"\n    created {\n    seconds: 1658168552\n    nanos: 157934800\n    }\n    provider: \"postgres-quickstart\"\n    features {\n    name: \"avg_transactions\"\n    variant: \"quickstart\"\n    }\n    label {\n    name: \"fraudulent\"\n    variant: \"quickstart\"\n    }\n    ```\n    Args:\n        name (str): Name of training set to be retrieved\n        variant (str): Name of variant of training set\n    Returns:\n        training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant\n    \"\"\"\nif local:\nif not variant:\nreturn get_resource_info_local(\"training-set\", name)\nreturn get_training_set_variant_info_local(name, variant)\nif not variant:\nreturn get_resource_info(self._stub, \"training-set\", name)\nreturn get_training_set_variant_info(self._stub, name, variant)\n</code></pre>"},{"location":"register/#src.featureform.register.ResourceClient.search","title":"<code>search(raw_query, local=False)</code>","text":"<p>Search for registered resources. Prints a list of results.</p> <p>Examples: Input<pre><code>providers_list = rc.search(\"transact\")\n</code></pre></p> Output<pre><code>// search prints out formatted information on all matches\nNAME                           VARIANT            TYPE\navg_transactions               default            Source\n</code></pre> Source code in <code>src/featureform/register.py</code> <pre><code>def search(self, raw_query, local=False):\n\"\"\"Search for registered resources. Prints a list of results.\n    **Examples:**\n    ``` py title=\"Input\"\n    providers_list = rc.search(\"transact\")\n    ```\n    ``` json title=\"Output\"\n    // search prints out formatted information on all matches\n    NAME                           VARIANT            TYPE\n    avg_transactions               default            Source\n    ```\n    \"\"\"\nif type(raw_query) != str or len(raw_query) == 0:\nraise Exception(\"query must be string and cannot be empty\")\nprocessed_query = raw_query.translate({ ord(i): None for i in '.,-@!*#'})\nif local:\nreturn search_local(processed_query)\nelse:\nreturn search(processed_query, self._host)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar","title":"<code>src.featureform.register.Registrar</code>","text":"<p>These functions are used to register new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the Resource Client instead.</p> definitions.py<pre><code>import featureform as ff\n# e.g. registering a new provider\nredis = ff.register_redis(\nname=\"redis-quickstart\",\nhost=\"quickstart-redis\",  # The internal dns name for redis\nport=6379,\ndescription=\"A Redis deployment we created for the Featureform quickstart\"\n)\n</code></pre> Source code in <code>src/featureform/register.py</code> <pre><code>class Registrar:\n\"\"\"These functions are used to register new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the [Resource Client](resource_client.md) instead.\n    ``` py title=\"definitions.py\"\n    import featureform as ff\n    # e.g. registering a new provider\n    redis = ff.register_redis(\n        name=\"redis-quickstart\",\n        host=\"quickstart-redis\",  # The internal dns name for redis\n        port=6379,\n        description=\"A Redis deployment we created for the Featureform quickstart\"\n    )\n    ```\n    \"\"\"\ndef __init__(self):\nself.__state = ResourceState()\nself.__resources = []\nself.__default_owner = \"\"\ndef add_resource(self, resource):\nself.__resources.append(resource)\ndef get_resources(self):\nreturn self.__resources\ndef register_user(self, name: str) -&gt; UserRegistrar:\n\"\"\"Register a user.\n        Args:\n            name (str): User to be registered.\n        Returns:\n            UserRegistrar: User\n        \"\"\"\nuser = User(name)\nself.__resources.append(user)\nreturn UserRegistrar(self, user)\ndef set_default_owner(self, user: str):\n\"\"\"Set default owner.\n        Args:\n            user (str): User to be set as default owner of resources.\n        \"\"\"\nself.__default_owner = user\ndef default_owner(self) -&gt; str:\nreturn self.__default_owner\ndef must_get_default_owner(self) -&gt; str:\nowner = self.default_owner()\nif owner == \"\":\nraise ValueError(\n\"Owner must be set or a default owner must be specified.\")\nreturn owner\ndef get_source(self, name, variant, local=False):\n\"\"\"Get a source. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        transactions = ff.get_source(\"transactions\",\"kaggle\")\n        transactions.register_resources(\n            entity=user,\n            entity_column=\"customerid\",\n            labels=[\n                {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n            ],\n        )\n        ```\n        Args:\n            name (str): Name of source to be retrieved\n            variant (str): Name of variant of source to be retrieved\n            local (bool): If localmode is being used\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nget = SourceReference(name=name, variant=variant, obj=None)\nself.__resources.append(get)\nif local:\nreturn LocalSource(self,\nname=name,\nowner=\"\",\nvariant=variant,\nprovider=\"\",\ndescription=\"\",\npath=\"\")\nelse:\nfakeDefinition = PrimaryData(location=SQLTable(name=\"\"))\nfakeSource = Source(name=name,\nvariant=variant,\ndefinition=fakeDefinition,\nowner=\"\",\nprovider=\"\",\ndescription=\"\")\nreturn ColumnSourceRegistrar(self, fakeSource)\ndef get_local_provider(self, name=\"local-mode\"):\nget = ProviderReference(name=name, provider_type=\"local\", obj=None)\nself.__resources.append(get)\nfakeConfig = LocalConfig()\nfakeProvider = Provider(name=name, function=\"LOCAL_ONLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn LocalProvider(self, fakeProvider)\ndef get_redis(self, name):\n\"\"\"Get a Redis provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        redis = ff.get_redis(\"redis-quickstart\")\n        // Defining a new transformation source with retrieved Redis provider\n        average_user_transaction.register_resources(\n            entity=user,\n            entity_column=\"user_id\",\n            inference_store=redis,\n            features=[\n                {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n            ],\n        )\n        ```\n        Args:\n            name (str): Name of Redis provider to be retrieved\n        Returns:\n            redis (OnlineProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"redis\", obj=None)\nself.__resources.append(get)\nfakeConfig = RedisConfig(host=\"\", port=123, password=\"\", db=123)\nfakeProvider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OnlineProvider(self, fakeProvider)\ndef get_mongodb(self, name):\n\"\"\"Get a MongoDB provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        mongodb = ff.get_mongodb(\"mongodb-quickstart\")\n        // Defining a new transformation source with retrieved MongoDB provider\n        average_user_transaction.register_resources(\n            entity=user,\n            entity_column=\"user_id\",\n            inference_store=mongodb,\n            features=[\n                {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n            ],\n        )\n        ```\n        Args:\n            name (str): Name of MongoDB provider to be retrieved\n        Returns:\n            mongodb (OnlineProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"mongodb\", obj=None)\nself.__resources.append(get)\nmock_config = MongoDBConfig()\nmock_provider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=mock_config)\nreturn OnlineProvider(self, mock_provider)\ndef get_blob_store(self, name):\n\"\"\"Get a Azure Blob provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        azure_blob = ff.get_blob_store(\"azure-blob-quickstart\")\n        // Defining a new transformation source with retrieved Azure blob provider\n        average_user_transaction.register_resources(\n            entity=user,\n            entity_column=\"user_id\",\n            inference_store=azure_blob,\n            features=[\n                {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n            ],\n        )\n        ```\n        Args:\n            name (str): Name of Azure blob provider to be retrieved\n        Returns:\n            azure_blob (FileStoreProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"AZURE\", obj=None)\nself.__resources.append(get)\nfake_azure_config = AzureFileStoreConfig(account_name=\"\", account_key=\"\", container_name=\"\", root_path=\"\")\nfake_config = OnlineBlobConfig(store_type=\"AZURE\", store_config=fake_azure_config.config())\nfakeProvider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=fake_config)\nreturn FileStoreProvider(self, fakeProvider, fake_config, \"AZURE\")\ndef get_postgres(self, name):\n\"\"\"Get a Postgres provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        postgres = ff.get_postgres(\"postgres-quickstart\")\n        transactions = postgres.register_table(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            table=\"Transactions\",  # This is the table's name in Postgres\n        )\n        ```\n        Args:\n            name (str): Name of Postgres provider to be retrieved\n        Returns:\n            postgres (OfflineSQLProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"postgres\", obj=None)\nself.__resources.append(get)\nfakeConfig = PostgresConfig(host=\"\", port=\"\", database=\"\", user=\"\", password=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\ndef get_snowflake(self, name):\n\"\"\"Get a Snowflake provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        snowflake = ff.get_snowflake(\"snowflake-quickstart\")\n        transactions = snowflake.register_table(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            table=\"Transactions\",  # This is the table's name in Postgres\n        )\n        ```\n        Args:\n            name (str): Name of Snowflake provider to be retrieved\n        Returns:\n            snowflake (OfflineSQLProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"snowflake\", obj=None)\nself.__resources.append(get)\nfakeConfig = SnowflakeConfig(account=\"\", database=\"\", organization=\"\", username=\"\", password=\"\", schema=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\ndef get_redshift(self, name):\n\"\"\"Get a Redshift provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        redshift = ff.get_redshift(\"redshift-quickstart\")\n        transactions = redshift.register_table(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            table=\"Transactions\",  # This is the table's name in Postgres\n        )\n        ```\n        Args:\n            name (str): Name of Redshift provider to be retrieved\n        Returns:\n            redshift (OfflineSQLProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"redshift\", obj=None)\nself.__resources.append(get)\nfakeConfig = RedshiftConfig(host=\"\", port=\"\", database=\"\", user=\"\", password=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\ndef get_bigquery(self, name):\n\"\"\"Get a BigQuery provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        bigquery = ff.get_bigquery(\"bigquery-quickstart\")\n        transactions = bigquery.register_table(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            table=\"Transactions\",  # This is the table's name in BigQuery\n        )\n        ```\n        Args:\n            name (str): Name of BigQuery provider to be retrieved\n        Returns:\n            bigquery (OfflineSQLProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"bigquery\", obj=None)\nself.__resources.append(get)\nfakeConfig = BigQueryConfig(project_id=\"\", dataset_id=\"\", credentials_path=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\ndef get_spark(self, name):\n\"\"\"Get a Spark provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        spark = ff.get_spark(\"spark-quickstart\")\n        transactions = spark.register_file(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            file_path=\"s3://bucket/path/to/file/transactions.parquet\",  # This is the path to file\n        )\n        ```\n        Args:\n            name (str): Name of Spark provider to be retrieved\n        Returns:\n            spark (OfflineSQLProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"spark\", obj=None)\nself.__resources.append(get)\nfakeConfig = SparkConfig(executor_type=\"\", executor_config={}, store_type=\"\", store_config={})\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSparkProvider(self, fakeProvider)\ndef get_kubernetes(self, name):\n\"\"\"\n        Get a k8s Azure provider. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        k8s_azure = ff.get_kubernetes(\"k8s-azure-quickstart\")\n        transactions = k8s_azure.register_file(\n            name=\"transactions\",\n            variant=\"kaggle\",\n            description=\"Fraud Dataset From Kaggle\",\n            path=\"path/to/blob\",\n        )\n        ```\n        Args:\n            name (str): Name of k8s Azure provider to be retrieved\n        Returns:\n            k8s_azure (OfflineK8sProvider): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"k8s-azure\", obj=None)\nself.__resources.append(get)\nfakeConfig = K8sConfig(store_type=\"\", store_config={})\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineK8sProvider(self, fakeProvider)\ndef get_s3(self, name):\n\"\"\"\n        Get a S3 provider. The returned object can be used with other providers such as Spark and Databricks.\n        **Examples**:\n        ``` py\n        s3 = ff.get_s3(\"s3-quickstart\")\n        spark = ff.register_spark(\n            name=f\"spark-emr-s3\",\n            description=\"A Spark deployment we created for the Featureform quickstart\",\n            team=\"featureform-team\",\n            executor=emr,\n            filestore=s3,\n        )\n        ```\n        Args:\n            name (str): Name of S3 to be retrieved\n        Returns:\n            s3 (FileStore): Provider\n        \"\"\"\nget = ProviderReference(name=name, provider_type=\"S3\", obj=None)\nself.__resources.append(get)\nfake_creds = AWSCredentials(\"id\", \"secret\")\nfakeConfig = S3StoreConfig(bucket_path=\"\", bucket_region=\"\", credentials=fake_creds)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=s3_config)\nreturn FileStoreProvider(provider, s3_config, s3_config.type())\ndef get_gcs(self, name):\nget = ProviderReference(name=name, provider_type=\"GCS\", obj=None)\nself.__resources.append(get)\nfilename = \"fake_secrets.json\"\nif not exists(filename):\nself._create_mock_creds_file(filename, {\"test\": \"creds\"})\nfake_creds = GCPCredentials(\"id\", filename)\nfakeConfig = GCSStoreConfig(bucket_name=\"\", bucket_path=\"\", credentials=fake_creds)\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineK8sProvider(self, fakeProvider)\ndef _create_mock_creds_file(self, filename, json_data):\nwith open(filename, \"w\") as f:\njson.dumps(json_data, f)\ndef get_entity(self, name, local=False):\n\"\"\"Get an entity. The returned object can be used to register additional resources.\n        **Examples**:\n        ``` py\n        entity = get_entity(\"user\")\n        transactions.register_resources(\n            entity=entity,\n            entity_column=\"customerid\",\n            labels=[\n                {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n            ],\n        )\n        ```\n        Args:\n            name (str): Name of entity to be retrieved\n            local (bool): If localmode is being used\n        Returns:\n            entity (EntityRegistrar): Entity\n        \"\"\"\nget = EntityReference(name=name, obj=None)\nself.__resources.append(get)\nfakeEntity = Entity(name=name, description=\"\")\nreturn EntityRegistrar(self, fakeEntity)\ndef register_redis(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"0.0.0.0\",\nport: int = 6379,\npassword: str = \"\",\ndb: int = 0):\n\"\"\"Register a Redis provider.\n        **Examples**:\n        ```\n        redis = ff.register_redis(\n            name=\"redis-quickstart\",\n            host=\"quickstart-redis\",  # The internal dns name for redis\n            port=6379,\n            description=\"A Redis deployment we created for the Featureform quickstart\"\n        )\n        ```\n        Args:\n            name (str): Name of Redis provider to be registered\n            description (str): Description of Redis provider to be registered\n            team (str): Name of team\n            host (str): Internal DNS name for Redis\n            port (int): Redis port\n            password (str): Redis password\n            db (str): Redis database\n        Returns:\n            redis (OnlineProvider): Provider\n        \"\"\"\nconfig = RedisConfig(host=host, port=port, password=password, db=db)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\ndef register_blob_store(self,\nname: str,\naccount_name: str,\naccount_key: str,\ncontainer_name: str,\nroot_path: str,\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register an azure blob store provider.\n        This has the functionality of an online store and can be used as a parameter\n        to a k8s or spark provider\n        **Examples**:\n        ```\n        blob = ff.register_blob_store(\n            name=\"azure-quickstart\",\n            container_name=\"my_company_container\"\n            root_path=\"custom/path/in/container\"\n            account_name=&lt;azure_account_name&gt;\n            account_key=&lt;azure_account_key&gt; \n            description=\"An azure blob store provider to store offline and inference data\"\n        )\n        ```\n        Args:\n            name (str): Name of Azure blob store to be registered\n            container_name (str): Azure container name\n            root_path (str): custom path in container to store data\n            description (str): Description of Azure Blob provider to be registered\n            team (str): the name of the team registering the filestore\n            account_name (str): Azure account name\n            account_key (str): Secret azure account key\n            config (AzureConfig): an azure config object (can be used in place of container name and account name)\n        Returns:\n            blob (StorageProvider): Provider\n                has all the functionality of OnlineProvider\n        \"\"\"\nazure_config = AzureFileStoreConfig(account_name=account_name, account_key=account_key,\ncontainer_name=container_name, root_path=root_path)\nconfig = OnlineBlobConfig(store_type=\"AZURE\", store_config=azure_config.config())\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, azure_config, \"AZURE\")\ndef register_s3(self,\nname: str,\ncredentials: AWSCredentials,\nbucket_path: str,\nbucket_region: str,\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a S3 store provider.\n        This has the functionality of an offline store and can be used as a parameter\n        to a k8s or spark provider\n        **Examples**:\n        ```\n        s3 = ff.register_s3(\n            name=\"s3-quickstart\",\n            credentials=aws_creds,\n            bucket_path=\"bucket_name/path\",\n            bucket_region=&lt;bucket_region&gt;,\n            description=\"An s3 store provider to store offline\"\n        )\n        ```\n        Args:\n            name (str): Name of S3 store to be registered\n            credentials (AWSCredentials): AWS credentials to access the bucket\n            bucket_path (str): custom path including the bucket name\n            bucket_region (str): aws region the bucket is located in\n            description (str): Description of S3 provider to be registered\n            team (str): the name of the team registering the filestore\n        Returns:\n            s3 (FileStoreProvider): Provider\n                has all the functionality of OfflineProvider\n        \"\"\"\ns3_config = S3StoreConfig(bucket_path=bucket_path, bucket_region=bucket_region, credentials=credentials)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=s3_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, s3_config, s3_config.type())\ndef register_gcs(self,\nname: str,\ncredentials: GCPCredentials,\nbucket_name: str,\nbucket_path: str = \"\",\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a GCS store provider.\n                **Examples**:\n        ```\n        gcs = ff.register_gcs(\n            name=\"gcs-quickstart\",\n            credentials=gcp_creds,\n            bucket_name=\"bucket_name\",\n            bucket_path=\"featureform/path/\",\n            description=\"An gcs store provider to store offline\"\n        )\n        ```\n        Args:\n            name (str): Name of GCS store to be registered\n            credentials (GCPCredentials): GCP credentials to access the bucket\n            bucket_name (str): The bucket name\n            bucket_path (str): Custom path to be used by featureform\n            description (str): Description of GCS provider to be registered\n            team (str): The name of the team registering the filestore\n        Returns:\n            gcs (FileStoreProvider): Provider\n                has all the functionality of OfflineProvider\n        \"\"\"\ngcs_config = GCSFileStoreConfig(bucket_name=bucket_name, bucket_path=bucket_path, credentials=credentials)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=gcs_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, gcs_config, gcs_config.type())\ndef register_hdfs(self,\nname: str,\nhost: str,\nport: str,\nusername: str = \"\",\npath: str = \"\",\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a HDFS store provider.\n        This has the functionality of an offline store and can be used as a parameter\n        to a k8s or spark provider\n        **Examples**:\n        ```\n        hdfs = ff.register_hdfs(\n            name=\"hdfs-quickstart\",\n            host=&lt;port&gt;,\n            port=&lt;port&gt;,\n            path=&lt;path&gt;,\n            username=&lt;username&gt;\n            description=\"An hdfs store provider to store offline\"\n        )\n        ```\n        Args:\n            name (str): Name of HDFS store to be registered\n            host (str): The hostname for HDFS\n            port (str): The port for the namenode for HDFS\n            path (str): A storage path within HDFS\n            username (str): A Username for HDFS\n            description (str): Description of HDFS provider to be registered\n            team (str): The name of the team registering HDFS\n        Returns:\n            hdfs (FileStoreProvider): Provider\n        \"\"\"\nhdfs_config = HDFSConfig(host=host, port=port, path=path, username=username)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=hdfs_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, hdfs_config, hdfs_config.type())\ndef register_firestore(self,\nname: str,\ncollection: str,\nproject_id: str,\ncredentials_path: str,\ndescription: str = \"\",\nteam: str = \"\",\n):\n\"\"\"Register a Firestore provider.\n        **Examples**:\n        ```\n        firestore = ff.register_firestore(\n            name=\"firestore-quickstart\",\n            description=\"A Firestore deployment we created for the Featureform quickstart\",\n            project_id=\"quickstart-project\",\n            collection=\"quickstart-collection\",\n        )\n        ```\n        Args:\n            name (str): Name of Firestore provider to be registered\n            description (str): Description of Firestore provider to be registered\n            team (str): The name of the team registering the filestore\n            project_id (str): The Project name in GCP\n            collection (str): The Collection name in Firestore under the given project ID\n            credentials_path (str): A path to a Google Credentials file with access permissions for Firestore\n        Returns:\n            firestore (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = FirestoreConfig(collection=collection, project_id=project_id, credentials_path=credentials_path)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\ndef register_cassandra(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"0.0.0.0\",\nport: int = 9042,\nusername: str = \"cassandra\",\npassword: str = \"cassandra\",\nkeyspace: str = \"\",\nconsistency: str = \"THREE\",\nreplication: int = 3):\nconfig = CassandraConfig(host=host, port=port, username=username, password=password, keyspace=keyspace,\nconsistency=consistency, replication=replication)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\ndef register_dynamodb(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\naccess_key: str = None,\nsecret_key: str = None,\nregion: str = None):\n\"\"\"Register a DynamoDB provider.\n        **Examples**:\n        ```\n        dynamodb = ff.register_dynamodb(\n            name=\"dynamodb-quickstart\",\n            description=\"A Dynamodb deployment we created for the Featureform quickstart\",\n            access_key=\"$ACCESS_KEY\",\n            secret_key=\"$SECRET_KEY\",\n            region=\"us-east-1\"\n        )\n        ```\n        Args:\n            name (str): Name of DynamoDB provider to be registered\n            description (str): Description of DynamoDB provider to be registered\n            team (str): Name of team\n            access_key (str): Access key\n            secret_key (str): Secret key\n            region (str): Region\n        Returns:\n            dynamodb (OnlineProvider): Provider\n        \"\"\"\nconfig = DynamodbConfig(access_key=access_key, secret_key=secret_key, region=region)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\ndef register_mongodb(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nusername: str = None,\npassword: str = None,\ndatabase: str = None,\nhost: str = None,\nport: str = None,\nthroughput: int = 1000\n):\n\"\"\"Register a MongoDB provider.\n        **Examples**:\n        ```\n        mongodb = ff.register_mongodb(\n            name=\"mongodb-quickstart\",\n            description=\"A MongoDB deployment\",\n            team=\"myteam\"\n            username=\"my_username\",\n            password=\"myPassword\",\n            database=\"featureform_database\"\n            host=\"my-mongodb.host.com\",\n            port=\"10225\"\n            throughput=10000\n        )\n        ```\n        Args:\n            name (str): Name of MongoDB provider to be registered\n            description (str): Description of MongoDB provider to be registered\n            team (str): Name of team\n            username (str): MongoDB username\n            password (str): MongoDB password\n            database (str): MongoDB database\n            host (str): MongoDB hostname\n            port (str): MongoDB port\n            throughput (int): The maximum RU limit for autoscaling\n        Returns:\n            mongodb (OnlineProvider): Provider\n        \"\"\"\nconfig = MongoDBConfig(username=username, password=password, host=host, port=port, database=database,\nthroughput=throughput)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\ndef register_snowflake_legacy(\nself,\nname: str,\nusername: str,\npassword: str,\naccount_locator: str,\ndatabase: str,\nschema: str = \"PUBLIC\",\ndescription: str = \"\",\nteam: str = \"\",\nwarehouse: str = \"\",\nrole: str = \"\",\n):\n\"\"\"Register a Snowflake provider using legacy credentials.\n        **Examples**:\n        ```\n        snowflake = ff.register_snowflake_legacy(\n            name=\"snowflake-quickstart\",\n            username=\"snowflake\",\n            password=\"password\", #pragma: allowlist secret\n            account_locator=\"account-locator\",\n            database=\"snowflake\",\n            schema=\"PUBLIC\",\n            description=\"A Snowflake deployment we created for the Featureform quickstart\"\n        )\n        ```\n        Args:\n            name (str): Name of Snowflake provider to be registered\n            username (str): Username\n            password (str): Password\n            account_locator (str): Account Locator\n            database (str): Database\n            schema (str): Schema\n            description (str): Description of Snowflake provider to be registered\n            team (str): Name of team\n            warehouse (str): Specifies the virtual warehouse to use by default for queries, loading, etc.\n            role (str): Specifies the role to use by default for accessing Snowflake objects in the client session\n        Returns:\n            snowflake (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = SnowflakeConfig(account_locator=account_locator,\ndatabase=database,\nusername=username,\npassword=password,\nschema=schema,\nwarehouse=warehouse,\nrole=role)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\ndef register_snowflake(\nself,\nname: str,\nusername: str,\npassword: str,\naccount: str,\norganization: str,\ndatabase: str,\nschema: str = \"PUBLIC\",\ndescription: str = \"\",\nteam: str = \"\",\nwarehouse: str = \"\",\nrole: str = \"\",\n):\n\"\"\"Register a Snowflake provider.\n        **Examples**:\n        ```\n        snowflake = ff.register_snowflake(\n            name=\"snowflake-quickstart\",\n            username=\"snowflake\",\n            password=\"password\", #pragma: allowlist secret\n            account=\"account\",\n            organization=\"organization\",\n            database=\"snowflake\",\n            schema=\"PUBLIC\",\n            description=\"A Snowflake deployment we created for the Featureform quickstart\"\n        )\n        ```\n        Args:\n            name (str): Name of Snowflake provider to be registered\n            username (str): Username\n            password (str): Password\n            account (str): Account\n            organization (str): Organization\n            database (str): Database\n            schema (str): Schema\n            description (str): Description of Snowflake provider to be registered\n            team (str): Name of team\n            warehouse (str): Specifies the virtual warehouse to use by default for queries, loading, etc.\n            role (str): Specifies the role to use by default for accessing Snowflake objects in the client session\n        Returns:\n            snowflake (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = SnowflakeConfig(account=account,\ndatabase=database,\norganization=organization,\nusername=username,\npassword=password,\nschema=schema,\nwarehouse=warehouse,\nrole=role)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\ndef register_postgres(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"0.0.0.0\",\nport: str = \"5432\",\nuser: str = \"postgres\",\npassword: str = \"password\",\ndatabase: str = \"postgres\"):\n\"\"\"Register a Postgres provider.\n        **Examples**:\n        ```\n        postgres = ff.register_postgres(\n            name=\"postgres-quickstart\",\n            description=\"A Postgres deployment we created for the Featureform quickstart\",\n            host=\"quickstart-postgres\",  # The internal dns name for postgres\n            port=\"5432\",\n            user=\"postgres\",\n            password=\"password\", #pragma: allowlist secret\n            database=\"postgres\"\n        )\n        ```\n        Args:\n            name (str): Name of Postgres provider to be registered\n            description (str): Description of Postgres provider to be registered\n            team (str): Name of team\n            host (str): Internal DNS name of Postgres\n            port (str): Port\n            user (str): User\n            password (str): Password\n            database (str): Database\n        Returns:\n            postgres (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = PostgresConfig(host=host,\nport=port,\ndatabase=database,\nuser=user,\npassword=password)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\ndef register_redshift(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"\",\nport: int = 5432,\nuser: str = \"redshift\",\npassword: str = \"password\",\ndatabase: str = \"dev\"):\n\"\"\"Register a Redshift provider.\n        **Examples**:\n        ```\n        redshift = ff.register_redshift(\n            name=\"redshift-quickstart\",\n            description=\"A Redshift deployment we created for the Featureform quickstart\",\n            host=\"quickstart-redshift\",  # The internal dns name for postgres\n            port=\"5432\",\n            user=\"redshift\",\n            password=\"password\", #pragma: allowlist secret\n            database=\"dev\"\n        )\n        ```\n        Args:\n            name (str): Name of Redshift provider to be registered\n            description (str): Description of Redshift provider to be registered\n            team (str): Name of team\n            host (str): Internal DNS name of Redshift\n            port (str): Port\n            user (str): User\n            password (str): Password\n            database (str): Database\n        Returns:\n            redshift (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = RedshiftConfig(host=host,\nport=port,\ndatabase=database,\nuser=user,\npassword=password)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\ndef register_bigquery(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nproject_id: str = \"\",\ndataset_id: str = \"\",\ncredentials_path: str = \"\"):\n\"\"\"Register a BigQuery provider.\n        **Examples**:\n        ```\n        bigquery = ff.register_bigquery(\n            name=\"bigquery-quickstart\",\n            description=\"A BigQuery deployment we created for the Featureform quickstart\",\n            project_id=\"quickstart-project\",\n            dataset_id=\"quickstart-dataset\",\n        )\n        ```\n        Args:\n            name (str): Name of BigQuery provider to be registered\n            description (str): Description of BigQuery provider to be registered\n            team (str): Name of team\n            project_id (str): The Project name in GCP\n            dataset_id (str): The Dataset name in GCP under the Project Id\n            credentials_path (str): A path to a Google Credentials file with access permissions for BigQuery\n        Returns:\n            bigquery (OfflineSQLProvider): Provider\n        \"\"\"\nconfig = BigQueryConfig(project_id=project_id,\ndataset_id=dataset_id,\ncredentials_path=credentials_path, )\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\ndef register_spark(self,\nname: str,\nexecutor: ExecutorCredentials,\nfilestore: FileStoreProvider,\ndescription: str = \"\",\nteam: str = \"\",\n):\n\"\"\"Register a Spark on Executor provider.\n        **Examples**:\n        ```\n        spark = ff.register_spark(\n            name=\"spark-quickstart\",\n            description=\"A Spark deployment we created for the Featureform quickstart\",\n            team=\"featureform-team\",\n            executor=databricks,\n            filestore=azure_blob_store\n        )\n        ```\n        Args:\n            name (str): Name of Spark provider to be registered\n            executor (ExecutorCredentials): an Executor Provider used for the compute power\n            filestore: (FileStoreProvider): a FileStoreProvider used for storage of data\n            description (str): Description of Spark provider to be registered\n            team (str): Name of team\n        Returns:\n            spark (OfflineSparkProvider): Provider\n        \"\"\"\nconfig = SparkConfig(\nexecutor_type=executor.type(),\nexecutor_config=executor.config(),\nstore_type=filestore.store_type(),\nstore_config=filestore.config())\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSparkProvider(self, provider)\ndef register_k8s(self,\nname: str,\nstore: FileStoreProvider,\ndescription: str = \"\",\nteam: str = \"\",\ndocker_image: str = \"\"\n):\n\"\"\"\n        Register an offline store provider to run on featureform's own k8s deployment\n        Args:\n            name (str): Name of provider\n            store (FileStoreProvider): Reference to registered file store provider\n            description (str): Description of primary data to be registered\n            team (str): A string parameter describing the team that owns the provider\n            docker_image (str): A custom docker image using the base image featureformcom/k8s_runner\n        **Examples**:\n        ```\n        k8s = ff.register_k8s(\n            name=\"k8s\",\n            description=\"Native featureform kubernetes compute\",\n            store=azure_blob,\n            team=\"featureform-team\",\n            docker_image=\"my-repo/image:version\"\n        )\n        ```\n        \"\"\"\nconfig = K8sConfig(\nstore_type=store.store_type(),\nstore_config=store.config(),\ndocker_image=docker_image\n)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineK8sProvider(self, provider)\ndef register_local(self):\n\"\"\"Register a Local provider.\n        **Examples**:\n        ```\n            local = register_local()\n        ```\n        Returns:\n            local (LocalProvider): Provider\n        \"\"\"\nconfig = LocalConfig()\nprovider = Provider(name=\"local-mode\",\nfunction=\"LOCAL_ONLINE\",\ndescription=\"This is local mode\",\nteam=\"team\",\nconfig=config)\nself.__resources.append(provider)\nlocal_provider = LocalProvider(self, provider)\nlocal_provider.insert_provider()\nreturn local_provider\ndef register_primary_data(self,\nname: str,\nvariant: str,\nlocation: Location,\nprovider: Union[str, OfflineProvider],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\"):\n\"\"\"Register a primary data source.\n        Args:\n            name (str): Name of source\n            variant (str): Name of variant\n            location (Location): Location of primary data\n            provider (Union[str, OfflineProvider]): Provider\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of primary data to be registered\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nsource = Source(name=name,\nvariant=variant,\ndefinition=PrimaryData(location=location),\nowner=owner,\nprovider=provider,\ndescription=description)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\ndef register_sql_transformation(self,\nname: str,\nvariant: str,\nquery: str,\nprovider: Union[str, OfflineProvider],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"Register a SQL transformation source.\n        Args:\n            name (str): Name of source\n            variant (str): Name of variant\n            query (str): SQL query\n            provider (Union[str, OfflineProvider]): Provider\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of primary data to be registered\n            schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n            args (K8sArgs): Additional transformation arguments\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nsource = Source(\nname=name,\nvariant=variant,\ndefinition=SQLTransformation(query, args),\nowner=owner,\nschedule=schedule,\nprovider=provider,\ndescription=description,\n)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\ndef sql_transformation(self,\nvariant: str,\nprovider: Union[str, OfflineProvider],\nname: str = \"\",\nschedule: str = \"\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"SQL transformation decorator.\n        Args:\n            variant (str): Name of variant\n            provider (Union[str, OfflineProvider]): Provider\n            name (str): Name of source\n            schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of SQL transformation\n            args (K8sArgs): Additional transformation arguments\n        Returns:\n            decorator (SQLTransformationDecorator): decorator\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\ndecorator = SQLTransformationDecorator(\nregistrar=self,\nname=name,\nvariant=variant,\nprovider=provider,\nschedule=schedule,\nowner=owner,\ndescription=description,\nargs=args,\n)\nself.__resources.append(decorator)\nreturn decorator\ndef register_df_transformation(self,\nname: str,\nquery: str,\nprovider: Union[str, OfflineProvider],\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\ninputs: list = [],\nschedule: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"Register a Dataframe transformation source.\n        Args:\n            name (str): Name of source\n            variant (str): Name of variant\n            query (str): SQL query\n            provider (Union[str, OfflineProvider]): Provider\n            name (str): Name of source\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of SQL transformation\n            inputs (list): Inputs to transformation\n            schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n            args (K8sArgs): Additional transformation arguments\n        Returns:\n            source (ColumnSourceRegistrar): Source\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nfor i, nv in enumerate(inputs):\nif not isinstance(nv, tuple):\ninputs[i] = nv.name_variant()\nsource = Source(\nname=name,\nvariant=variant,\ndefinition=DFTransformation(query, inputs, args),\nowner=owner,\nschedule=schedule,\nprovider=provider,\ndescription=description,\n)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\ndef df_transformation(self,\nprovider: Union[str, OfflineProvider],\nvariant: str = \"default\",\nname: str = \"\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\ninputs: list = [],\nargs: K8sArgs = None\n):\n\"\"\"Dataframe transformation decorator.\n        Args:\n            variant (str): Name of variant\n            provider (Union[str, OfflineProvider]): Provider\n            name (str): Name of source\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of SQL transformation\n            inputs (list): Inputs to transformation\n            args (K8sArgs): Additional transformation arguments\n        Returns:\n            decorator (DFTransformationDecorator): decorator\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nfor i, nv in enumerate(inputs):\nif not isinstance(nv, tuple):\ninputs[i] = nv.name_variant()\ndecorator = DFTransformationDecorator(\nregistrar=self,\nname=name,\nvariant=variant,\nprovider=provider,\nowner=owner,\ndescription=description,\ninputs=inputs,\nargs=args\n)\nself.__resources.append(decorator)\nreturn decorator\ndef state(self):\nfor resource in self.__resources:\ntry:\nif isinstance(resource, SQLTransformationDecorator) or isinstance(resource, DFTransformationDecorator):\nresource = resource.to_source()\nself.__state.add(resource)\nexcept ResourceRedefinedError:\nraise\nexcept Exception as e:\nresource_variant = f\" ({resource.variant})\" if hasattr(resource, 'variant') else \"\"\nraise Exception(f\"Could not add apply {resource.name}{resource_variant}: {e}\")\nself.__resources = []\nreturn self.__state\ndef clear_state(self):\nself.__state = ResourceState()\ndef register_entity(self, name: str, description: str = \"\"):\n\"\"\"Register an entity.\n        **Examples**:\n        ``` py\n            user = ff.register_entity(\"user\")\n        ```\n        Args:\n            name (str): Name of entity to be registered\n            description (str): Description of entity to be registered\n        Returns:\n            entity (EntityRegistrar): Entity\n        \"\"\"\nentity = Entity(name=name, description=description)\nself.__resources.append(entity)\nreturn EntityRegistrar(self, entity)\ndef register_column_resources(\nself,\nsource: Union[NameVariant, SourceRegistrar, SQLTransformationDecorator],\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\n):\n\"\"\"Create features and labels from a source. Used in the register_resources function.\n        Args:\n            source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity\n            entity (Union[str, EntityRegistrar]): Entity\n            entity_column (str): Column of entity in source\n            owner (Union[str, UserRegistrar]): Owner\n            inference_store (Union[str, OnlineProvider]): Online provider\n            features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)\n            labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)\n            description (str): Description\n            schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n        Returns:\n            resource (ResourceRegistrar): resource\n        \"\"\"\nif type(inference_store) == FileStoreProvider and inference_store.store_type() in NON_INFERENCE_STORES:\nraise Exception(f\"cannot use '{inference_store.store_type()}' as an inference store.\")\nif features is None:\nfeatures = []\nif labels is None:\nlabels = []\nif len(features) == 0 and len(labels) == 0:\nraise ValueError(\"No features or labels set\")\nif not isinstance(source, tuple):\nsource = source.id()\nif not isinstance(entity, str):\nentity = entity.name()\nif not isinstance(inference_store, str):\ninference_store = inference_store.name()\nif len(features) &gt; 0 and inference_store == \"\":\nraise ValueError(\n\"Inference store must be set when defining features\")\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nfeature_resources = []\nlabel_resources = []\nfor feature in features:\nvariant = feature.get(\"variant\", \"default\")\ndesc = feature.get(\"description\", \"\")\nresource = Feature(\nname=feature[\"name\"],\nvariant=variant,\nsource=source,\nvalue_type=feature[\"type\"],\nentity=entity,\nowner=owner,\nprovider=inference_store,\ndescription=desc,\nschedule=schedule,\nlocation=ResourceColumnMapping(\nentity=entity_column,\nvalue=feature[\"column\"],\ntimestamp=timestamp_column,\n),\n)\nself.__resources.append(resource)\nfeature_resources.append(resource)\nfor label in labels:\nvariant = label.get(\"variant\", \"default\")\ndesc = label.get(\"description\", \"\")\nresource = Label(\nname=label[\"name\"],\nvariant=variant,\nsource=source,\nvalue_type=label[\"type\"],\nentity=entity,\nowner=owner,\nprovider=inference_store,\ndescription=desc,\nlocation=ResourceColumnMapping(\nentity=entity_column,\nvalue=label[\"column\"],\ntimestamp=timestamp_column,\n),\n)\nself.__resources.append(resource)\nlabel_resources.append(resource)\nreturn ResourceRegistrar(self, features, labels)\ndef __get_feature_nv(self, features):\nfeature_nv_list = []\nfeature_lags = []\nfor feature in features:\nif isinstance(feature, str):\nfeature_nv = (feature, \"default\")\nfeature_nv_list.append(feature_nv)\nelif isinstance(feature, dict):\nlag = feature.get(\"lag\")\nif lag:\nrequired_lag_keys = set([\"lag\", \"feature\", \"variant\"])\nreceived_lag_keys = set(feature.keys())\nif required_lag_keys.intersection(received_lag_keys) != required_lag_keys:\nraise ValueError(\nf\"feature lags require 'lag', 'feature', 'variant' fields. Received: {feature.keys()}\")\nif not isinstance(lag, timedelta):\nraise ValueError(\nf\"the lag, '{lag}', needs to be of type 'datetime.timedelta'. Received: {type(lag)}.\")\nfeature_name_variant = (feature[\"feature\"], feature[\"variant\"])\nif feature_name_variant not in feature_nv_list:\nfeature_nv_list.append(feature_name_variant)\nlag_name = f\"{feature['feature']}_{feature['variant']}_lag_{lag}\"\nsanitized_lag_name = lag_name.replace(\" \", \"\").replace(\",\", \"_\").replace(\":\", \"_\")\nfeature[\"name\"] = feature.get(\"name\", sanitized_lag_name)\nfeature_lags.append(feature)\nelse:\nfeature_nv = (feature[\"name\"], feature[\"variant\"])\nfeature_nv_list.append(feature_nv)\nelif isinstance(feature, list):\nfeature_nv, feature_lags_list = self.__get_feature_nv(feature)\nif len(feature_nv) != 0:\nfeature_nv_list.extend(feature_nv)\nif len(feature_lags_list) != 0:\nfeature_lags.extend(feature_lags_list)\nelse:\nfeature_nv_list.append(feature)\nreturn feature_nv_list, feature_lags\ndef register_training_set(self,\nname: str,\nvariant: str = \"default\",\nfeatures: list = [],\nlabel: NameVariant = (),\nresources: list = [],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nschedule: str = \"\"):\n\"\"\"Register a training set.\n        Args:\n            name (str): Name of training set to be registered\n            variant (str): Name of variant to be registered\n            label (NameVariant): Label of training set\n            features (List[NameVariant]): Features of training set\n            resources (List[Resource]): A list of previously registered resources\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of training set to be registered\n            schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n        Returns:\n            resource (ResourceRegistrar): resource\n        \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif isinstance(features, tuple):\nraise ValueError(\"Features must be entered as a list\")\nif isinstance(label, list):\nraise ValueError(\"Label must be entered as a tuple\")\nfor resource in resources:\nfeatures += resource.features()\nresource_label = resource.label()\n# label == () if it is NOT manually entered\nif label == ():\nlabel = resource_label\n# Elif: If label was updated to store resource_label it will not check the following elif\nelif resource_label != ():\nraise ValueError(\"A training set can only have one label\")\nif isinstance(label, str):\nlabel = (label, \"default\")\nfeatures, feature_lags = self.__get_feature_nv(features)\nif label == ():\nraise ValueError(\"Label must be set\")\nif features == []:\nraise ValueError(\"A training-set must have atleast one feature\")\nresource = TrainingSet(\nname=name,\nvariant=variant,\ndescription=description,\nowner=owner,\nschedule=schedule,\nlabel=label,\nfeatures=features,\nfeature_lags=feature_lags\n)\nself.__resources.append(resource)\ndef register_model(self, name: str) -&gt; Model:\n\"\"\"Register a model.\n        Args:\n            name (str): Model to be registered\n        Returns:\n            ModelRegistrar: Model\n        \"\"\"\nmodel = Model(name)\nself.__resources.append(model)\nreturn model\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.df_transformation","title":"<code>df_transformation(provider, variant='default', name='', owner='', description='', inputs=[], args=None)</code>","text":"<p>Dataframe transformation decorator.</p> <p>Parameters:</p> Name Type Description Default <code>variant</code> <code>str</code> <p>Name of variant</p> <code>'default'</code> <code>provider</code> <code>Union[str, OfflineProvider]</code> <p>Provider</p> required <code>name</code> <code>str</code> <p>Name of source</p> <code>''</code> <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of SQL transformation</p> <code>''</code> <code>inputs</code> <code>list</code> <p>Inputs to transformation</p> <code>[]</code> <code>args</code> <code>K8sArgs</code> <p>Additional transformation arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>decorator</code> <code>DFTransformationDecorator</code> <p>decorator</p> Source code in <code>src/featureform/register.py</code> <pre><code>def df_transformation(self,\nprovider: Union[str, OfflineProvider],\nvariant: str = \"default\",\nname: str = \"\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\ninputs: list = [],\nargs: K8sArgs = None\n):\n\"\"\"Dataframe transformation decorator.\n    Args:\n        variant (str): Name of variant\n        provider (Union[str, OfflineProvider]): Provider\n        name (str): Name of source\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of SQL transformation\n        inputs (list): Inputs to transformation\n        args (K8sArgs): Additional transformation arguments\n    Returns:\n        decorator (DFTransformationDecorator): decorator\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nfor i, nv in enumerate(inputs):\nif not isinstance(nv, tuple):\ninputs[i] = nv.name_variant()\ndecorator = DFTransformationDecorator(\nregistrar=self,\nname=name,\nvariant=variant,\nprovider=provider,\nowner=owner,\ndescription=description,\ninputs=inputs,\nargs=args\n)\nself.__resources.append(decorator)\nreturn decorator\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_bigquery","title":"<code>get_bigquery(name)</code>","text":"<p>Get a BigQuery provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>bigquery = ff.get_bigquery(\"bigquery-quickstart\")\ntransactions = bigquery.register_table(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\ntable=\"Transactions\",  # This is the table's name in BigQuery\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of BigQuery provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>bigquery</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_bigquery(self, name):\n\"\"\"Get a BigQuery provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    bigquery = ff.get_bigquery(\"bigquery-quickstart\")\n    transactions = bigquery.register_table(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        table=\"Transactions\",  # This is the table's name in BigQuery\n    )\n    ```\n    Args:\n        name (str): Name of BigQuery provider to be retrieved\n    Returns:\n        bigquery (OfflineSQLProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"bigquery\", obj=None)\nself.__resources.append(get)\nfakeConfig = BigQueryConfig(project_id=\"\", dataset_id=\"\", credentials_path=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_blob_store","title":"<code>get_blob_store(name)</code>","text":"<p>Get a Azure Blob provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>azure_blob = ff.get_blob_store(\"azure-blob-quickstart\")\n// Defining a new transformation source with retrieved Azure blob provider\naverage_user_transaction.register_resources(\nentity=user,\nentity_column=\"user_id\",\ninference_store=azure_blob,\nfeatures=[\n{\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Azure blob provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>azure_blob</code> <code>FileStoreProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_blob_store(self, name):\n\"\"\"Get a Azure Blob provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    azure_blob = ff.get_blob_store(\"azure-blob-quickstart\")\n    // Defining a new transformation source with retrieved Azure blob provider\n    average_user_transaction.register_resources(\n        entity=user,\n        entity_column=\"user_id\",\n        inference_store=azure_blob,\n        features=[\n            {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n        ],\n    )\n    ```\n    Args:\n        name (str): Name of Azure blob provider to be retrieved\n    Returns:\n        azure_blob (FileStoreProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"AZURE\", obj=None)\nself.__resources.append(get)\nfake_azure_config = AzureFileStoreConfig(account_name=\"\", account_key=\"\", container_name=\"\", root_path=\"\")\nfake_config = OnlineBlobConfig(store_type=\"AZURE\", store_config=fake_azure_config.config())\nfakeProvider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=fake_config)\nreturn FileStoreProvider(self, fakeProvider, fake_config, \"AZURE\")\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_entity","title":"<code>get_entity(name, local=False)</code>","text":"<p>Get an entity. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>entity = get_entity(\"user\")\ntransactions.register_resources(\nentity=entity,\nentity_column=\"customerid\",\nlabels=[\n{\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of entity to be retrieved</p> required <code>local</code> <code>bool</code> <p>If localmode is being used</p> <code>False</code> <p>Returns:</p> Name Type Description <code>entity</code> <code>EntityRegistrar</code> <p>Entity</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_entity(self, name, local=False):\n\"\"\"Get an entity. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    entity = get_entity(\"user\")\n    transactions.register_resources(\n        entity=entity,\n        entity_column=\"customerid\",\n        labels=[\n            {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n        ],\n    )\n    ```\n    Args:\n        name (str): Name of entity to be retrieved\n        local (bool): If localmode is being used\n    Returns:\n        entity (EntityRegistrar): Entity\n    \"\"\"\nget = EntityReference(name=name, obj=None)\nself.__resources.append(get)\nfakeEntity = Entity(name=name, description=\"\")\nreturn EntityRegistrar(self, fakeEntity)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_kubernetes","title":"<code>get_kubernetes(name)</code>","text":"<p>Get a k8s Azure provider. The returned object can be used to register additional resources. Examples: <pre><code>k8s_azure = ff.get_kubernetes(\"k8s-azure-quickstart\")\ntransactions = k8s_azure.register_file(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\npath=\"path/to/blob\",\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of k8s Azure provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>k8s_azure</code> <code>OfflineK8sProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_kubernetes(self, name):\n\"\"\"\n    Get a k8s Azure provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    k8s_azure = ff.get_kubernetes(\"k8s-azure-quickstart\")\n    transactions = k8s_azure.register_file(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        path=\"path/to/blob\",\n    )\n    ```\n    Args:\n        name (str): Name of k8s Azure provider to be retrieved\n    Returns:\n        k8s_azure (OfflineK8sProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"k8s-azure\", obj=None)\nself.__resources.append(get)\nfakeConfig = K8sConfig(store_type=\"\", store_config={})\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineK8sProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_mongodb","title":"<code>get_mongodb(name)</code>","text":"<p>Get a MongoDB provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>mongodb = ff.get_mongodb(\"mongodb-quickstart\")\n// Defining a new transformation source with retrieved MongoDB provider\naverage_user_transaction.register_resources(\nentity=user,\nentity_column=\"user_id\",\ninference_store=mongodb,\nfeatures=[\n{\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of MongoDB provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>mongodb</code> <code>OnlineProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_mongodb(self, name):\n\"\"\"Get a MongoDB provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    mongodb = ff.get_mongodb(\"mongodb-quickstart\")\n    // Defining a new transformation source with retrieved MongoDB provider\n    average_user_transaction.register_resources(\n        entity=user,\n        entity_column=\"user_id\",\n        inference_store=mongodb,\n        features=[\n            {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n        ],\n    )\n    ```\n    Args:\n        name (str): Name of MongoDB provider to be retrieved\n    Returns:\n        mongodb (OnlineProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"mongodb\", obj=None)\nself.__resources.append(get)\nmock_config = MongoDBConfig()\nmock_provider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=mock_config)\nreturn OnlineProvider(self, mock_provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_postgres","title":"<code>get_postgres(name)</code>","text":"<p>Get a Postgres provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>postgres = ff.get_postgres(\"postgres-quickstart\")\ntransactions = postgres.register_table(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\ntable=\"Transactions\",  # This is the table's name in Postgres\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Postgres provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>postgres</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_postgres(self, name):\n\"\"\"Get a Postgres provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    postgres = ff.get_postgres(\"postgres-quickstart\")\n    transactions = postgres.register_table(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        table=\"Transactions\",  # This is the table's name in Postgres\n    )\n    ```\n    Args:\n        name (str): Name of Postgres provider to be retrieved\n    Returns:\n        postgres (OfflineSQLProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"postgres\", obj=None)\nself.__resources.append(get)\nfakeConfig = PostgresConfig(host=\"\", port=\"\", database=\"\", user=\"\", password=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_redis","title":"<code>get_redis(name)</code>","text":"<p>Get a Redis provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>redis = ff.get_redis(\"redis-quickstart\")\n// Defining a new transformation source with retrieved Redis provider\naverage_user_transaction.register_resources(\nentity=user,\nentity_column=\"user_id\",\ninference_store=redis,\nfeatures=[\n{\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Redis provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>redis</code> <code>OnlineProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_redis(self, name):\n\"\"\"Get a Redis provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    redis = ff.get_redis(\"redis-quickstart\")\n    // Defining a new transformation source with retrieved Redis provider\n    average_user_transaction.register_resources(\n        entity=user,\n        entity_column=\"user_id\",\n        inference_store=redis,\n        features=[\n            {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"},\n        ],\n    )\n    ```\n    Args:\n        name (str): Name of Redis provider to be retrieved\n    Returns:\n        redis (OnlineProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"redis\", obj=None)\nself.__resources.append(get)\nfakeConfig = RedisConfig(host=\"\", port=123, password=\"\", db=123)\nfakeProvider = Provider(name=name, function=\"ONLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OnlineProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_redshift","title":"<code>get_redshift(name)</code>","text":"<p>Get a Redshift provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>redshift = ff.get_redshift(\"redshift-quickstart\")\ntransactions = redshift.register_table(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\ntable=\"Transactions\",  # This is the table's name in Postgres\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Redshift provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>redshift</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_redshift(self, name):\n\"\"\"Get a Redshift provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    redshift = ff.get_redshift(\"redshift-quickstart\")\n    transactions = redshift.register_table(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        table=\"Transactions\",  # This is the table's name in Postgres\n    )\n    ```\n    Args:\n        name (str): Name of Redshift provider to be retrieved\n    Returns:\n        redshift (OfflineSQLProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"redshift\", obj=None)\nself.__resources.append(get)\nfakeConfig = RedshiftConfig(host=\"\", port=\"\", database=\"\", user=\"\", password=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_s3","title":"<code>get_s3(name)</code>","text":"<p>Get a S3 provider. The returned object can be used with other providers such as Spark and Databricks. Examples: <pre><code>s3 = ff.get_s3(\"s3-quickstart\")\nspark = ff.register_spark(\nname=f\"spark-emr-s3\",\ndescription=\"A Spark deployment we created for the Featureform quickstart\",\nteam=\"featureform-team\",\nexecutor=emr,\nfilestore=s3,\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of S3 to be retrieved</p> required <p>Returns:</p> Name Type Description <code>s3</code> <code>FileStore</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_s3(self, name):\n\"\"\"\n    Get a S3 provider. The returned object can be used with other providers such as Spark and Databricks.\n    **Examples**:\n    ``` py\n    s3 = ff.get_s3(\"s3-quickstart\")\n    spark = ff.register_spark(\n        name=f\"spark-emr-s3\",\n        description=\"A Spark deployment we created for the Featureform quickstart\",\n        team=\"featureform-team\",\n        executor=emr,\n        filestore=s3,\n    )\n    ```\n    Args:\n        name (str): Name of S3 to be retrieved\n    Returns:\n        s3 (FileStore): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"S3\", obj=None)\nself.__resources.append(get)\nfake_creds = AWSCredentials(\"id\", \"secret\")\nfakeConfig = S3StoreConfig(bucket_path=\"\", bucket_region=\"\", credentials=fake_creds)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=s3_config)\nreturn FileStoreProvider(provider, s3_config, s3_config.type())\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_snowflake","title":"<code>get_snowflake(name)</code>","text":"<p>Get a Snowflake provider. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>snowflake = ff.get_snowflake(\"snowflake-quickstart\")\ntransactions = snowflake.register_table(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\ntable=\"Transactions\",  # This is the table's name in Postgres\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Snowflake provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>snowflake</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_snowflake(self, name):\n\"\"\"Get a Snowflake provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    snowflake = ff.get_snowflake(\"snowflake-quickstart\")\n    transactions = snowflake.register_table(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        table=\"Transactions\",  # This is the table's name in Postgres\n    )\n    ```\n    Args:\n        name (str): Name of Snowflake provider to be retrieved\n    Returns:\n        snowflake (OfflineSQLProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"snowflake\", obj=None)\nself.__resources.append(get)\nfakeConfig = SnowflakeConfig(account=\"\", database=\"\", organization=\"\", username=\"\", password=\"\", schema=\"\")\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSQLProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_source","title":"<code>get_source(name, variant, local=False)</code>","text":"<p>Get a source. The returned object can be used to register additional resources.</p> <p>Examples: <pre><code>transactions = ff.get_source(\"transactions\",\"kaggle\")\ntransactions.register_resources(\nentity=user,\nentity_column=\"customerid\",\nlabels=[\n{\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source to be retrieved</p> required <code>variant</code> <code>str</code> <p>Name of variant of source to be retrieved</p> required <code>local</code> <code>bool</code> <p>If localmode is being used</p> <code>False</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_source(self, name, variant, local=False):\n\"\"\"Get a source. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    transactions = ff.get_source(\"transactions\",\"kaggle\")\n    transactions.register_resources(\n        entity=user,\n        entity_column=\"customerid\",\n        labels=[\n            {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"},\n        ],\n    )\n    ```\n    Args:\n        name (str): Name of source to be retrieved\n        variant (str): Name of variant of source to be retrieved\n        local (bool): If localmode is being used\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nget = SourceReference(name=name, variant=variant, obj=None)\nself.__resources.append(get)\nif local:\nreturn LocalSource(self,\nname=name,\nowner=\"\",\nvariant=variant,\nprovider=\"\",\ndescription=\"\",\npath=\"\")\nelse:\nfakeDefinition = PrimaryData(location=SQLTable(name=\"\"))\nfakeSource = Source(name=name,\nvariant=variant,\ndefinition=fakeDefinition,\nowner=\"\",\nprovider=\"\",\ndescription=\"\")\nreturn ColumnSourceRegistrar(self, fakeSource)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.get_spark","title":"<code>get_spark(name)</code>","text":"<p>Get a Spark provider. The returned object can be used to register additional resources. Examples: <pre><code>spark = ff.get_spark(\"spark-quickstart\")\ntransactions = spark.register_file(\nname=\"transactions\",\nvariant=\"kaggle\",\ndescription=\"Fraud Dataset From Kaggle\",\nfile_path=\"s3://bucket/path/to/file/transactions.parquet\",  # This is the path to file\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Spark provider to be retrieved</p> required <p>Returns:</p> Name Type Description <code>spark</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def get_spark(self, name):\n\"\"\"Get a Spark provider. The returned object can be used to register additional resources.\n    **Examples**:\n    ``` py\n    spark = ff.get_spark(\"spark-quickstart\")\n    transactions = spark.register_file(\n        name=\"transactions\",\n        variant=\"kaggle\",\n        description=\"Fraud Dataset From Kaggle\",\n        file_path=\"s3://bucket/path/to/file/transactions.parquet\",  # This is the path to file\n    )\n    ```\n    Args:\n        name (str): Name of Spark provider to be retrieved\n    Returns:\n        spark (OfflineSQLProvider): Provider\n    \"\"\"\nget = ProviderReference(name=name, provider_type=\"spark\", obj=None)\nself.__resources.append(get)\nfakeConfig = SparkConfig(executor_type=\"\", executor_config={}, store_type=\"\", store_config={})\nfakeProvider = Provider(name=name, function=\"OFFLINE\", description=\"\", team=\"\", config=fakeConfig)\nreturn OfflineSparkProvider(self, fakeProvider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_bigquery","title":"<code>register_bigquery(name, description='', team='', project_id='', dataset_id='', credentials_path='')</code>","text":"<p>Register a BigQuery provider.</p> <p>Examples: <pre><code>bigquery = ff.register_bigquery(\n    name=\"bigquery-quickstart\",\n    description=\"A BigQuery deployment we created for the Featureform quickstart\",\n    project_id=\"quickstart-project\",\n    dataset_id=\"quickstart-dataset\",\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of BigQuery provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of BigQuery provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>project_id</code> <code>str</code> <p>The Project name in GCP</p> <code>''</code> <code>dataset_id</code> <code>str</code> <p>The Dataset name in GCP under the Project Id</p> <code>''</code> <code>credentials_path</code> <code>str</code> <p>A path to a Google Credentials file with access permissions for BigQuery</p> <code>''</code> <p>Returns:</p> Name Type Description <code>bigquery</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_bigquery(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nproject_id: str = \"\",\ndataset_id: str = \"\",\ncredentials_path: str = \"\"):\n\"\"\"Register a BigQuery provider.\n    **Examples**:\n    ```\n    bigquery = ff.register_bigquery(\n        name=\"bigquery-quickstart\",\n        description=\"A BigQuery deployment we created for the Featureform quickstart\",\n        project_id=\"quickstart-project\",\n        dataset_id=\"quickstart-dataset\",\n    )\n    ```\n    Args:\n        name (str): Name of BigQuery provider to be registered\n        description (str): Description of BigQuery provider to be registered\n        team (str): Name of team\n        project_id (str): The Project name in GCP\n        dataset_id (str): The Dataset name in GCP under the Project Id\n        credentials_path (str): A path to a Google Credentials file with access permissions for BigQuery\n    Returns:\n        bigquery (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = BigQueryConfig(project_id=project_id,\ndataset_id=dataset_id,\ncredentials_path=credentials_path, )\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_blob_store","title":"<code>register_blob_store(name, account_name, account_key, container_name, root_path, description='', team='')</code>","text":"<p>Register an azure blob store provider.</p> <p>This has the functionality of an online store and can be used as a parameter to a k8s or spark provider</p> <p>Examples: <pre><code>blob = ff.register_blob_store(\n    name=\"azure-quickstart\",\n    container_name=\"my_company_container\"\n    root_path=\"custom/path/in/container\"\n    account_name=&lt;azure_account_name&gt;\n    account_key=&lt;azure_account_key&gt; \n    description=\"An azure blob store provider to store offline and inference data\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Azure blob store to be registered</p> required <code>container_name</code> <code>str</code> <p>Azure container name</p> required <code>root_path</code> <code>str</code> <p>custom path in container to store data</p> required <code>description</code> <code>str</code> <p>Description of Azure Blob provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>the name of the team registering the filestore</p> <code>''</code> <code>account_name</code> <code>str</code> <p>Azure account name</p> required <code>account_key</code> <code>str</code> <p>Secret azure account key</p> required <code>config</code> <code>AzureConfig</code> <p>an azure config object (can be used in place of container name and account name)</p> required <p>Returns:</p> Name Type Description <code>blob</code> <code>StorageProvider</code> <p>Provider has all the functionality of OnlineProvider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_blob_store(self,\nname: str,\naccount_name: str,\naccount_key: str,\ncontainer_name: str,\nroot_path: str,\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register an azure blob store provider.\n    This has the functionality of an online store and can be used as a parameter\n    to a k8s or spark provider\n    **Examples**:\n    ```\n    blob = ff.register_blob_store(\n        name=\"azure-quickstart\",\n        container_name=\"my_company_container\"\n        root_path=\"custom/path/in/container\"\n        account_name=&lt;azure_account_name&gt;\n        account_key=&lt;azure_account_key&gt; \n        description=\"An azure blob store provider to store offline and inference data\"\n    )\n    ```\n    Args:\n        name (str): Name of Azure blob store to be registered\n        container_name (str): Azure container name\n        root_path (str): custom path in container to store data\n        description (str): Description of Azure Blob provider to be registered\n        team (str): the name of the team registering the filestore\n        account_name (str): Azure account name\n        account_key (str): Secret azure account key\n        config (AzureConfig): an azure config object (can be used in place of container name and account name)\n    Returns:\n        blob (StorageProvider): Provider\n            has all the functionality of OnlineProvider\n    \"\"\"\nazure_config = AzureFileStoreConfig(account_name=account_name, account_key=account_key,\ncontainer_name=container_name, root_path=root_path)\nconfig = OnlineBlobConfig(store_type=\"AZURE\", store_config=azure_config.config())\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, azure_config, \"AZURE\")\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_column_resources","title":"<code>register_column_resources(source, entity, entity_column, owner='', inference_store='', features=None, labels=None, timestamp_column='', description='', schedule='')</code>","text":"<p>Create features and labels from a source. Used in the register_resources function.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]</code> <p>Source of features, labels, entity</p> required <code>entity</code> <code>Union[str, EntityRegistrar]</code> <p>Entity</p> required <code>entity_column</code> <code>str</code> <p>Column of entity in source</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>inference_store</code> <code>Union[str, OnlineProvider]</code> <p>Online provider</p> <code>''</code> <code>features</code> <code>List[ColumnMapping]</code> <p>List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)</p> <code>None</code> <code>labels</code> <code>List[ColumnMapping]</code> <p>List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)</p> <code>None</code> <code>description</code> <code>str</code> <p>Description</p> <code>''</code> <code>schedule</code> <code>str</code> <p>Kubernetes CronJob schedule string (\" *  * *\")</p> <code>''</code> <p>Returns:</p> Name Type Description <code>resource</code> <code>ResourceRegistrar</code> <p>resource</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_column_resources(\nself,\nsource: Union[NameVariant, SourceRegistrar, SQLTransformationDecorator],\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\n):\n\"\"\"Create features and labels from a source. Used in the register_resources function.\n    Args:\n        source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity\n        entity (Union[str, EntityRegistrar]): Entity\n        entity_column (str): Column of entity in source\n        owner (Union[str, UserRegistrar]): Owner\n        inference_store (Union[str, OnlineProvider]): Online provider\n        features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)\n        labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type)\n        description (str): Description\n        schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n    Returns:\n        resource (ResourceRegistrar): resource\n    \"\"\"\nif type(inference_store) == FileStoreProvider and inference_store.store_type() in NON_INFERENCE_STORES:\nraise Exception(f\"cannot use '{inference_store.store_type()}' as an inference store.\")\nif features is None:\nfeatures = []\nif labels is None:\nlabels = []\nif len(features) == 0 and len(labels) == 0:\nraise ValueError(\"No features or labels set\")\nif not isinstance(source, tuple):\nsource = source.id()\nif not isinstance(entity, str):\nentity = entity.name()\nif not isinstance(inference_store, str):\ninference_store = inference_store.name()\nif len(features) &gt; 0 and inference_store == \"\":\nraise ValueError(\n\"Inference store must be set when defining features\")\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nfeature_resources = []\nlabel_resources = []\nfor feature in features:\nvariant = feature.get(\"variant\", \"default\")\ndesc = feature.get(\"description\", \"\")\nresource = Feature(\nname=feature[\"name\"],\nvariant=variant,\nsource=source,\nvalue_type=feature[\"type\"],\nentity=entity,\nowner=owner,\nprovider=inference_store,\ndescription=desc,\nschedule=schedule,\nlocation=ResourceColumnMapping(\nentity=entity_column,\nvalue=feature[\"column\"],\ntimestamp=timestamp_column,\n),\n)\nself.__resources.append(resource)\nfeature_resources.append(resource)\nfor label in labels:\nvariant = label.get(\"variant\", \"default\")\ndesc = label.get(\"description\", \"\")\nresource = Label(\nname=label[\"name\"],\nvariant=variant,\nsource=source,\nvalue_type=label[\"type\"],\nentity=entity,\nowner=owner,\nprovider=inference_store,\ndescription=desc,\nlocation=ResourceColumnMapping(\nentity=entity_column,\nvalue=label[\"column\"],\ntimestamp=timestamp_column,\n),\n)\nself.__resources.append(resource)\nlabel_resources.append(resource)\nreturn ResourceRegistrar(self, features, labels)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_df_transformation","title":"<code>register_df_transformation(name, query, provider, variant='default', owner='', description='', inputs=[], schedule='', args=None)</code>","text":"<p>Register a Dataframe transformation source.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source</p> required <code>variant</code> <code>str</code> <p>Name of variant</p> <code>'default'</code> <code>query</code> <code>str</code> <p>SQL query</p> required <code>provider</code> <code>Union[str, OfflineProvider]</code> <p>Provider</p> required <code>name</code> <code>str</code> <p>Name of source</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of SQL transformation</p> <code>''</code> <code>inputs</code> <code>list</code> <p>Inputs to transformation</p> <code>[]</code> <code>schedule</code> <code>str</code> <p>Kubernetes CronJob schedule string (\" *  * *\")</p> <code>''</code> <code>args</code> <code>K8sArgs</code> <p>Additional transformation arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_df_transformation(self,\nname: str,\nquery: str,\nprovider: Union[str, OfflineProvider],\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\ninputs: list = [],\nschedule: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"Register a Dataframe transformation source.\n    Args:\n        name (str): Name of source\n        variant (str): Name of variant\n        query (str): SQL query\n        provider (Union[str, OfflineProvider]): Provider\n        name (str): Name of source\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of SQL transformation\n        inputs (list): Inputs to transformation\n        schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n        args (K8sArgs): Additional transformation arguments\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nfor i, nv in enumerate(inputs):\nif not isinstance(nv, tuple):\ninputs[i] = nv.name_variant()\nsource = Source(\nname=name,\nvariant=variant,\ndefinition=DFTransformation(query, inputs, args),\nowner=owner,\nschedule=schedule,\nprovider=provider,\ndescription=description,\n)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_dynamodb","title":"<code>register_dynamodb(name, description='', team='', access_key=None, secret_key=None, region=None)</code>","text":"<p>Register a DynamoDB provider.</p> <p>Examples: <pre><code>dynamodb = ff.register_dynamodb(\n    name=\"dynamodb-quickstart\",\n    description=\"A Dynamodb deployment we created for the Featureform quickstart\",\n    access_key=\"$ACCESS_KEY\",\n    secret_key=\"$SECRET_KEY\",\n    region=\"us-east-1\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of DynamoDB provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of DynamoDB provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>access_key</code> <code>str</code> <p>Access key</p> <code>None</code> <code>secret_key</code> <code>str</code> <p>Secret key</p> <code>None</code> <code>region</code> <code>str</code> <p>Region</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dynamodb</code> <code>OnlineProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_dynamodb(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\naccess_key: str = None,\nsecret_key: str = None,\nregion: str = None):\n\"\"\"Register a DynamoDB provider.\n    **Examples**:\n    ```\n    dynamodb = ff.register_dynamodb(\n        name=\"dynamodb-quickstart\",\n        description=\"A Dynamodb deployment we created for the Featureform quickstart\",\n        access_key=\"$ACCESS_KEY\",\n        secret_key=\"$SECRET_KEY\",\n        region=\"us-east-1\"\n    )\n    ```\n    Args:\n        name (str): Name of DynamoDB provider to be registered\n        description (str): Description of DynamoDB provider to be registered\n        team (str): Name of team\n        access_key (str): Access key\n        secret_key (str): Secret key\n        region (str): Region\n    Returns:\n        dynamodb (OnlineProvider): Provider\n    \"\"\"\nconfig = DynamodbConfig(access_key=access_key, secret_key=secret_key, region=region)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_entity","title":"<code>register_entity(name, description='')</code>","text":"<p>Register an entity.</p> <p>Examples: <pre><code>    user = ff.register_entity(\"user\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of entity to be registered</p> required <code>description</code> <code>str</code> <p>Description of entity to be registered</p> <code>''</code> <p>Returns:</p> Name Type Description <code>entity</code> <code>EntityRegistrar</code> <p>Entity</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_entity(self, name: str, description: str = \"\"):\n\"\"\"Register an entity.\n    **Examples**:\n    ``` py\n        user = ff.register_entity(\"user\")\n    ```\n    Args:\n        name (str): Name of entity to be registered\n        description (str): Description of entity to be registered\n    Returns:\n        entity (EntityRegistrar): Entity\n    \"\"\"\nentity = Entity(name=name, description=description)\nself.__resources.append(entity)\nreturn EntityRegistrar(self, entity)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_firestore","title":"<code>register_firestore(name, collection, project_id, credentials_path, description='', team='')</code>","text":"<p>Register a Firestore provider.</p> <p>Examples: <pre><code>firestore = ff.register_firestore(\n    name=\"firestore-quickstart\",\n    description=\"A Firestore deployment we created for the Featureform quickstart\",\n    project_id=\"quickstart-project\",\n    collection=\"quickstart-collection\",\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Firestore provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of Firestore provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>The name of the team registering the filestore</p> <code>''</code> <code>project_id</code> <code>str</code> <p>The Project name in GCP</p> required <code>collection</code> <code>str</code> <p>The Collection name in Firestore under the given project ID</p> required <code>credentials_path</code> <code>str</code> <p>A path to a Google Credentials file with access permissions for Firestore</p> required <p>Returns:</p> Name Type Description <code>firestore</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_firestore(self,\nname: str,\ncollection: str,\nproject_id: str,\ncredentials_path: str,\ndescription: str = \"\",\nteam: str = \"\",\n):\n\"\"\"Register a Firestore provider.\n    **Examples**:\n    ```\n    firestore = ff.register_firestore(\n        name=\"firestore-quickstart\",\n        description=\"A Firestore deployment we created for the Featureform quickstart\",\n        project_id=\"quickstart-project\",\n        collection=\"quickstart-collection\",\n    )\n    ```\n    Args:\n        name (str): Name of Firestore provider to be registered\n        description (str): Description of Firestore provider to be registered\n        team (str): The name of the team registering the filestore\n        project_id (str): The Project name in GCP\n        collection (str): The Collection name in Firestore under the given project ID\n        credentials_path (str): A path to a Google Credentials file with access permissions for Firestore\n    Returns:\n        firestore (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = FirestoreConfig(collection=collection, project_id=project_id, credentials_path=credentials_path)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_gcs","title":"<code>register_gcs(name, credentials, bucket_name, bucket_path='', description='', team='')</code>","text":"<p>Register a GCS store provider.         Examples: <pre><code>gcs = ff.register_gcs(\n    name=\"gcs-quickstart\",\n    credentials=gcp_creds,\n    bucket_name=\"bucket_name\",\n    bucket_path=\"featureform/path/\",\n    description=\"An gcs store provider to store offline\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of GCS store to be registered</p> required <code>credentials</code> <code>GCPCredentials</code> <p>GCP credentials to access the bucket</p> required <code>bucket_name</code> <code>str</code> <p>The bucket name</p> required <code>bucket_path</code> <code>str</code> <p>Custom path to be used by featureform</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of GCS provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>The name of the team registering the filestore</p> <code>''</code> <p>Returns:</p> Name Type Description <code>gcs</code> <code>FileStoreProvider</code> <p>Provider has all the functionality of OfflineProvider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_gcs(self,\nname: str,\ncredentials: GCPCredentials,\nbucket_name: str,\nbucket_path: str = \"\",\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a GCS store provider.\n            **Examples**:\n    ```\n    gcs = ff.register_gcs(\n        name=\"gcs-quickstart\",\n        credentials=gcp_creds,\n        bucket_name=\"bucket_name\",\n        bucket_path=\"featureform/path/\",\n        description=\"An gcs store provider to store offline\"\n    )\n    ```\n    Args:\n        name (str): Name of GCS store to be registered\n        credentials (GCPCredentials): GCP credentials to access the bucket\n        bucket_name (str): The bucket name\n        bucket_path (str): Custom path to be used by featureform\n        description (str): Description of GCS provider to be registered\n        team (str): The name of the team registering the filestore\n    Returns:\n        gcs (FileStoreProvider): Provider\n            has all the functionality of OfflineProvider\n    \"\"\"\ngcs_config = GCSFileStoreConfig(bucket_name=bucket_name, bucket_path=bucket_path, credentials=credentials)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=gcs_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, gcs_config, gcs_config.type())\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_hdfs","title":"<code>register_hdfs(name, host, port, username='', path='', description='', team='')</code>","text":"<p>Register a HDFS store provider.</p> <p>This has the functionality of an offline store and can be used as a parameter to a k8s or spark provider</p> <p>Examples: <pre><code>hdfs = ff.register_hdfs(\n    name=\"hdfs-quickstart\",\n    host=&lt;port&gt;,\n    port=&lt;port&gt;,\n    path=&lt;path&gt;,\n    username=&lt;username&gt;\n    description=\"An hdfs store provider to store offline\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of HDFS store to be registered</p> required <code>host</code> <code>str</code> <p>The hostname for HDFS</p> required <code>port</code> <code>str</code> <p>The port for the namenode for HDFS</p> required <code>path</code> <code>str</code> <p>A storage path within HDFS</p> <code>''</code> <code>username</code> <code>str</code> <p>A Username for HDFS</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of HDFS provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>The name of the team registering HDFS</p> <code>''</code> <p>Returns:</p> Name Type Description <code>hdfs</code> <code>FileStoreProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_hdfs(self,\nname: str,\nhost: str,\nport: str,\nusername: str = \"\",\npath: str = \"\",\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a HDFS store provider.\n    This has the functionality of an offline store and can be used as a parameter\n    to a k8s or spark provider\n    **Examples**:\n    ```\n    hdfs = ff.register_hdfs(\n        name=\"hdfs-quickstart\",\n        host=&lt;port&gt;,\n        port=&lt;port&gt;,\n        path=&lt;path&gt;,\n        username=&lt;username&gt;\n        description=\"An hdfs store provider to store offline\"\n    )\n    ```\n    Args:\n        name (str): Name of HDFS store to be registered\n        host (str): The hostname for HDFS\n        port (str): The port for the namenode for HDFS\n        path (str): A storage path within HDFS\n        username (str): A Username for HDFS\n        description (str): Description of HDFS provider to be registered\n        team (str): The name of the team registering HDFS\n    Returns:\n        hdfs (FileStoreProvider): Provider\n    \"\"\"\nhdfs_config = HDFSConfig(host=host, port=port, path=path, username=username)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=hdfs_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, hdfs_config, hdfs_config.type())\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_k8s","title":"<code>register_k8s(name, store, description='', team='', docker_image='')</code>","text":"<p>Register an offline store provider to run on featureform's own k8s deployment</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of provider</p> required <code>store</code> <code>FileStoreProvider</code> <p>Reference to registered file store provider</p> required <code>description</code> <code>str</code> <p>Description of primary data to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>A string parameter describing the team that owns the provider</p> <code>''</code> <code>docker_image</code> <code>str</code> <p>A custom docker image using the base image featureformcom/k8s_runner</p> <code>''</code> <p>Examples: <pre><code>k8s = ff.register_k8s(\n    name=\"k8s\",\n    description=\"Native featureform kubernetes compute\",\n    store=azure_blob,\n    team=\"featureform-team\",\n    docker_image=\"my-repo/image:version\"\n)\n</code></pre></p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_k8s(self,\nname: str,\nstore: FileStoreProvider,\ndescription: str = \"\",\nteam: str = \"\",\ndocker_image: str = \"\"\n):\n\"\"\"\n    Register an offline store provider to run on featureform's own k8s deployment\n    Args:\n        name (str): Name of provider\n        store (FileStoreProvider): Reference to registered file store provider\n        description (str): Description of primary data to be registered\n        team (str): A string parameter describing the team that owns the provider\n        docker_image (str): A custom docker image using the base image featureformcom/k8s_runner\n    **Examples**:\n    ```\n    k8s = ff.register_k8s(\n        name=\"k8s\",\n        description=\"Native featureform kubernetes compute\",\n        store=azure_blob,\n        team=\"featureform-team\",\n        docker_image=\"my-repo/image:version\"\n    )\n    ```\n    \"\"\"\nconfig = K8sConfig(\nstore_type=store.store_type(),\nstore_config=store.config(),\ndocker_image=docker_image\n)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineK8sProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_local","title":"<code>register_local()</code>","text":"<p>Register a Local provider.</p> <p>Examples: <pre><code>    local = register_local()\n</code></pre></p> <p>Returns:</p> Name Type Description <code>local</code> <code>LocalProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_local(self):\n\"\"\"Register a Local provider.\n    **Examples**:\n    ```\n        local = register_local()\n    ```\n    Returns:\n        local (LocalProvider): Provider\n    \"\"\"\nconfig = LocalConfig()\nprovider = Provider(name=\"local-mode\",\nfunction=\"LOCAL_ONLINE\",\ndescription=\"This is local mode\",\nteam=\"team\",\nconfig=config)\nself.__resources.append(provider)\nlocal_provider = LocalProvider(self, provider)\nlocal_provider.insert_provider()\nreturn local_provider\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_model","title":"<code>register_model(name)</code>","text":"<p>Register a model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Model to be registered</p> required <p>Returns:</p> Name Type Description <code>ModelRegistrar</code> <code>Model</code> <p>Model</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_model(self, name: str) -&gt; Model:\n\"\"\"Register a model.\n    Args:\n        name (str): Model to be registered\n    Returns:\n        ModelRegistrar: Model\n    \"\"\"\nmodel = Model(name)\nself.__resources.append(model)\nreturn model\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_mongodb","title":"<code>register_mongodb(name, description='', team='', username=None, password=None, database=None, host=None, port=None, throughput=1000)</code>","text":"<p>Register a MongoDB provider.</p> <p>Examples: <pre><code>mongodb = ff.register_mongodb(\n    name=\"mongodb-quickstart\",\n    description=\"A MongoDB deployment\",\n    team=\"myteam\"\n    username=\"my_username\",\n    password=\"myPassword\",\n    database=\"featureform_database\"\n    host=\"my-mongodb.host.com\",\n    port=\"10225\"\n    throughput=10000\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of MongoDB provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of MongoDB provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>username</code> <code>str</code> <p>MongoDB username</p> <code>None</code> <code>password</code> <code>str</code> <p>MongoDB password</p> <code>None</code> <code>database</code> <code>str</code> <p>MongoDB database</p> <code>None</code> <code>host</code> <code>str</code> <p>MongoDB hostname</p> <code>None</code> <code>port</code> <code>str</code> <p>MongoDB port</p> <code>None</code> <code>throughput</code> <code>int</code> <p>The maximum RU limit for autoscaling</p> <code>1000</code> <p>Returns:</p> Name Type Description <code>mongodb</code> <code>OnlineProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_mongodb(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nusername: str = None,\npassword: str = None,\ndatabase: str = None,\nhost: str = None,\nport: str = None,\nthroughput: int = 1000\n):\n\"\"\"Register a MongoDB provider.\n    **Examples**:\n    ```\n    mongodb = ff.register_mongodb(\n        name=\"mongodb-quickstart\",\n        description=\"A MongoDB deployment\",\n        team=\"myteam\"\n        username=\"my_username\",\n        password=\"myPassword\",\n        database=\"featureform_database\"\n        host=\"my-mongodb.host.com\",\n        port=\"10225\"\n        throughput=10000\n    )\n    ```\n    Args:\n        name (str): Name of MongoDB provider to be registered\n        description (str): Description of MongoDB provider to be registered\n        team (str): Name of team\n        username (str): MongoDB username\n        password (str): MongoDB password\n        database (str): MongoDB database\n        host (str): MongoDB hostname\n        port (str): MongoDB port\n        throughput (int): The maximum RU limit for autoscaling\n    Returns:\n        mongodb (OnlineProvider): Provider\n    \"\"\"\nconfig = MongoDBConfig(username=username, password=password, host=host, port=port, database=database,\nthroughput=throughput)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_postgres","title":"<code>register_postgres(name, description='', team='', host='0.0.0.0', port='5432', user='postgres', password='password', database='postgres')</code>","text":"<p>Register a Postgres provider.</p> <p>Examples: <pre><code>postgres = ff.register_postgres(\n    name=\"postgres-quickstart\",\n    description=\"A Postgres deployment we created for the Featureform quickstart\",\n    host=\"quickstart-postgres\",  # The internal dns name for postgres\n    port=\"5432\",\n    user=\"postgres\",\n    password=\"password\", #pragma: allowlist secret\n    database=\"postgres\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Postgres provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of Postgres provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>host</code> <code>str</code> <p>Internal DNS name of Postgres</p> <code>'0.0.0.0'</code> <code>port</code> <code>str</code> <p>Port</p> <code>'5432'</code> <code>user</code> <code>str</code> <p>User</p> <code>'postgres'</code> <code>password</code> <code>str</code> <p>Password</p> <code>'password'</code> <code>database</code> <code>str</code> <p>Database</p> <code>'postgres'</code> <p>Returns:</p> Name Type Description <code>postgres</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_postgres(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"0.0.0.0\",\nport: str = \"5432\",\nuser: str = \"postgres\",\npassword: str = \"password\",\ndatabase: str = \"postgres\"):\n\"\"\"Register a Postgres provider.\n    **Examples**:\n    ```\n    postgres = ff.register_postgres(\n        name=\"postgres-quickstart\",\n        description=\"A Postgres deployment we created for the Featureform quickstart\",\n        host=\"quickstart-postgres\",  # The internal dns name for postgres\n        port=\"5432\",\n        user=\"postgres\",\n        password=\"password\", #pragma: allowlist secret\n        database=\"postgres\"\n    )\n    ```\n    Args:\n        name (str): Name of Postgres provider to be registered\n        description (str): Description of Postgres provider to be registered\n        team (str): Name of team\n        host (str): Internal DNS name of Postgres\n        port (str): Port\n        user (str): User\n        password (str): Password\n        database (str): Database\n    Returns:\n        postgres (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = PostgresConfig(host=host,\nport=port,\ndatabase=database,\nuser=user,\npassword=password)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_primary_data","title":"<code>register_primary_data(name, variant, location, provider, owner='', description='')</code>","text":"<p>Register a primary data source.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source</p> required <code>variant</code> <code>str</code> <p>Name of variant</p> required <code>location</code> <code>Location</code> <p>Location of primary data</p> required <code>provider</code> <code>Union[str, OfflineProvider]</code> <p>Provider</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of primary data to be registered</p> <code>''</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_primary_data(self,\nname: str,\nvariant: str,\nlocation: Location,\nprovider: Union[str, OfflineProvider],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\"):\n\"\"\"Register a primary data source.\n    Args:\n        name (str): Name of source\n        variant (str): Name of variant\n        location (Location): Location of primary data\n        provider (Union[str, OfflineProvider]): Provider\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of primary data to be registered\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nsource = Source(name=name,\nvariant=variant,\ndefinition=PrimaryData(location=location),\nowner=owner,\nprovider=provider,\ndescription=description)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_redis","title":"<code>register_redis(name, description='', team='', host='0.0.0.0', port=6379, password='', db=0)</code>","text":"<p>Register a Redis provider.</p> <p>Examples: <pre><code>redis = ff.register_redis(\n    name=\"redis-quickstart\",\n    host=\"quickstart-redis\",  # The internal dns name for redis\n    port=6379,\n    description=\"A Redis deployment we created for the Featureform quickstart\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Redis provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of Redis provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>host</code> <code>str</code> <p>Internal DNS name for Redis</p> <code>'0.0.0.0'</code> <code>port</code> <code>int</code> <p>Redis port</p> <code>6379</code> <code>password</code> <code>str</code> <p>Redis password</p> <code>''</code> <code>db</code> <code>str</code> <p>Redis database</p> <code>0</code> <p>Returns:</p> Name Type Description <code>redis</code> <code>OnlineProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_redis(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"0.0.0.0\",\nport: int = 6379,\npassword: str = \"\",\ndb: int = 0):\n\"\"\"Register a Redis provider.\n    **Examples**:\n    ```\n    redis = ff.register_redis(\n        name=\"redis-quickstart\",\n        host=\"quickstart-redis\",  # The internal dns name for redis\n        port=6379,\n        description=\"A Redis deployment we created for the Featureform quickstart\"\n    )\n    ```\n    Args:\n        name (str): Name of Redis provider to be registered\n        description (str): Description of Redis provider to be registered\n        team (str): Name of team\n        host (str): Internal DNS name for Redis\n        port (int): Redis port\n        password (str): Redis password\n        db (str): Redis database\n    Returns:\n        redis (OnlineProvider): Provider\n    \"\"\"\nconfig = RedisConfig(host=host, port=port, password=password, db=db)\nprovider = Provider(name=name,\nfunction=\"ONLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OnlineProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_redshift","title":"<code>register_redshift(name, description='', team='', host='', port=5432, user='redshift', password='password', database='dev')</code>","text":"<p>Register a Redshift provider.</p> <p>Examples: <pre><code>redshift = ff.register_redshift(\n    name=\"redshift-quickstart\",\n    description=\"A Redshift deployment we created for the Featureform quickstart\",\n    host=\"quickstart-redshift\",  # The internal dns name for postgres\n    port=\"5432\",\n    user=\"redshift\",\n    password=\"password\", #pragma: allowlist secret\n    database=\"dev\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Redshift provider to be registered</p> required <code>description</code> <code>str</code> <p>Description of Redshift provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>host</code> <code>str</code> <p>Internal DNS name of Redshift</p> <code>''</code> <code>port</code> <code>str</code> <p>Port</p> <code>5432</code> <code>user</code> <code>str</code> <p>User</p> <code>'redshift'</code> <code>password</code> <code>str</code> <p>Password</p> <code>'password'</code> <code>database</code> <code>str</code> <p>Database</p> <code>'dev'</code> <p>Returns:</p> Name Type Description <code>redshift</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_redshift(self,\nname: str,\ndescription: str = \"\",\nteam: str = \"\",\nhost: str = \"\",\nport: int = 5432,\nuser: str = \"redshift\",\npassword: str = \"password\",\ndatabase: str = \"dev\"):\n\"\"\"Register a Redshift provider.\n    **Examples**:\n    ```\n    redshift = ff.register_redshift(\n        name=\"redshift-quickstart\",\n        description=\"A Redshift deployment we created for the Featureform quickstart\",\n        host=\"quickstart-redshift\",  # The internal dns name for postgres\n        port=\"5432\",\n        user=\"redshift\",\n        password=\"password\", #pragma: allowlist secret\n        database=\"dev\"\n    )\n    ```\n    Args:\n        name (str): Name of Redshift provider to be registered\n        description (str): Description of Redshift provider to be registered\n        team (str): Name of team\n        host (str): Internal DNS name of Redshift\n        port (str): Port\n        user (str): User\n        password (str): Password\n        database (str): Database\n    Returns:\n        redshift (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = RedshiftConfig(host=host,\nport=port,\ndatabase=database,\nuser=user,\npassword=password)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_s3","title":"<code>register_s3(name, credentials, bucket_path, bucket_region, description='', team='')</code>","text":"<p>Register a S3 store provider.</p> <p>This has the functionality of an offline store and can be used as a parameter to a k8s or spark provider</p> <p>Examples: <pre><code>s3 = ff.register_s3(\n    name=\"s3-quickstart\",\n    credentials=aws_creds,\n    bucket_path=\"bucket_name/path\",\n    bucket_region=&lt;bucket_region&gt;,\n    description=\"An s3 store provider to store offline\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of S3 store to be registered</p> required <code>credentials</code> <code>AWSCredentials</code> <p>AWS credentials to access the bucket</p> required <code>bucket_path</code> <code>str</code> <p>custom path including the bucket name</p> required <code>bucket_region</code> <code>str</code> <p>aws region the bucket is located in</p> required <code>description</code> <code>str</code> <p>Description of S3 provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>the name of the team registering the filestore</p> <code>''</code> <p>Returns:</p> Name Type Description <code>s3</code> <code>FileStoreProvider</code> <p>Provider has all the functionality of OfflineProvider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_s3(self,\nname: str,\ncredentials: AWSCredentials,\nbucket_path: str,\nbucket_region: str,\ndescription: str = \"\",\nteam: str = \"\", ):\n\"\"\"Register a S3 store provider.\n    This has the functionality of an offline store and can be used as a parameter\n    to a k8s or spark provider\n    **Examples**:\n    ```\n    s3 = ff.register_s3(\n        name=\"s3-quickstart\",\n        credentials=aws_creds,\n        bucket_path=\"bucket_name/path\",\n        bucket_region=&lt;bucket_region&gt;,\n        description=\"An s3 store provider to store offline\"\n    )\n    ```\n    Args:\n        name (str): Name of S3 store to be registered\n        credentials (AWSCredentials): AWS credentials to access the bucket\n        bucket_path (str): custom path including the bucket name\n        bucket_region (str): aws region the bucket is located in\n        description (str): Description of S3 provider to be registered\n        team (str): the name of the team registering the filestore\n    Returns:\n        s3 (FileStoreProvider): Provider\n            has all the functionality of OfflineProvider\n    \"\"\"\ns3_config = S3StoreConfig(bucket_path=bucket_path, bucket_region=bucket_region, credentials=credentials)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=s3_config)\nself.__resources.append(provider)\nreturn FileStoreProvider(self, provider, s3_config, s3_config.type())\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_snowflake","title":"<code>register_snowflake(name, username, password, account, organization, database, schema='PUBLIC', description='', team='', warehouse='', role='')</code>","text":"<p>Register a Snowflake provider.</p> <p>Examples: <pre><code>snowflake = ff.register_snowflake(\n    name=\"snowflake-quickstart\",\n    username=\"snowflake\",\n    password=\"password\", #pragma: allowlist secret\n    account=\"account\",\n    organization=\"organization\",\n    database=\"snowflake\",\n    schema=\"PUBLIC\",\n    description=\"A Snowflake deployment we created for the Featureform quickstart\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Snowflake provider to be registered</p> required <code>username</code> <code>str</code> <p>Username</p> required <code>password</code> <code>str</code> <p>Password</p> required <code>account</code> <code>str</code> <p>Account</p> required <code>organization</code> <code>str</code> <p>Organization</p> required <code>database</code> <code>str</code> <p>Database</p> required <code>schema</code> <code>str</code> <p>Schema</p> <code>'PUBLIC'</code> <code>description</code> <code>str</code> <p>Description of Snowflake provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>warehouse</code> <code>str</code> <p>Specifies the virtual warehouse to use by default for queries, loading, etc.</p> <code>''</code> <code>role</code> <code>str</code> <p>Specifies the role to use by default for accessing Snowflake objects in the client session</p> <code>''</code> <p>Returns:</p> Name Type Description <code>snowflake</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_snowflake(\nself,\nname: str,\nusername: str,\npassword: str,\naccount: str,\norganization: str,\ndatabase: str,\nschema: str = \"PUBLIC\",\ndescription: str = \"\",\nteam: str = \"\",\nwarehouse: str = \"\",\nrole: str = \"\",\n):\n\"\"\"Register a Snowflake provider.\n    **Examples**:\n    ```\n    snowflake = ff.register_snowflake(\n        name=\"snowflake-quickstart\",\n        username=\"snowflake\",\n        password=\"password\", #pragma: allowlist secret\n        account=\"account\",\n        organization=\"organization\",\n        database=\"snowflake\",\n        schema=\"PUBLIC\",\n        description=\"A Snowflake deployment we created for the Featureform quickstart\"\n    )\n    ```\n    Args:\n        name (str): Name of Snowflake provider to be registered\n        username (str): Username\n        password (str): Password\n        account (str): Account\n        organization (str): Organization\n        database (str): Database\n        schema (str): Schema\n        description (str): Description of Snowflake provider to be registered\n        team (str): Name of team\n        warehouse (str): Specifies the virtual warehouse to use by default for queries, loading, etc.\n        role (str): Specifies the role to use by default for accessing Snowflake objects in the client session\n    Returns:\n        snowflake (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = SnowflakeConfig(account=account,\ndatabase=database,\norganization=organization,\nusername=username,\npassword=password,\nschema=schema,\nwarehouse=warehouse,\nrole=role)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_snowflake_legacy","title":"<code>register_snowflake_legacy(name, username, password, account_locator, database, schema='PUBLIC', description='', team='', warehouse='', role='')</code>","text":"<p>Register a Snowflake provider using legacy credentials.</p> <p>Examples: <pre><code>snowflake = ff.register_snowflake_legacy(\n    name=\"snowflake-quickstart\",\n    username=\"snowflake\",\n    password=\"password\", #pragma: allowlist secret\n    account_locator=\"account-locator\",\n    database=\"snowflake\",\n    schema=\"PUBLIC\",\n    description=\"A Snowflake deployment we created for the Featureform quickstart\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Snowflake provider to be registered</p> required <code>username</code> <code>str</code> <p>Username</p> required <code>password</code> <code>str</code> <p>Password</p> required <code>account_locator</code> <code>str</code> <p>Account Locator</p> required <code>database</code> <code>str</code> <p>Database</p> required <code>schema</code> <code>str</code> <p>Schema</p> <code>'PUBLIC'</code> <code>description</code> <code>str</code> <p>Description of Snowflake provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <code>warehouse</code> <code>str</code> <p>Specifies the virtual warehouse to use by default for queries, loading, etc.</p> <code>''</code> <code>role</code> <code>str</code> <p>Specifies the role to use by default for accessing Snowflake objects in the client session</p> <code>''</code> <p>Returns:</p> Name Type Description <code>snowflake</code> <code>OfflineSQLProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_snowflake_legacy(\nself,\nname: str,\nusername: str,\npassword: str,\naccount_locator: str,\ndatabase: str,\nschema: str = \"PUBLIC\",\ndescription: str = \"\",\nteam: str = \"\",\nwarehouse: str = \"\",\nrole: str = \"\",\n):\n\"\"\"Register a Snowflake provider using legacy credentials.\n    **Examples**:\n    ```\n    snowflake = ff.register_snowflake_legacy(\n        name=\"snowflake-quickstart\",\n        username=\"snowflake\",\n        password=\"password\", #pragma: allowlist secret\n        account_locator=\"account-locator\",\n        database=\"snowflake\",\n        schema=\"PUBLIC\",\n        description=\"A Snowflake deployment we created for the Featureform quickstart\"\n    )\n    ```\n    Args:\n        name (str): Name of Snowflake provider to be registered\n        username (str): Username\n        password (str): Password\n        account_locator (str): Account Locator\n        database (str): Database\n        schema (str): Schema\n        description (str): Description of Snowflake provider to be registered\n        team (str): Name of team\n        warehouse (str): Specifies the virtual warehouse to use by default for queries, loading, etc.\n        role (str): Specifies the role to use by default for accessing Snowflake objects in the client session\n    Returns:\n        snowflake (OfflineSQLProvider): Provider\n    \"\"\"\nconfig = SnowflakeConfig(account_locator=account_locator,\ndatabase=database,\nusername=username,\npassword=password,\nschema=schema,\nwarehouse=warehouse,\nrole=role)\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSQLProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_spark","title":"<code>register_spark(name, executor, filestore, description='', team='')</code>","text":"<p>Register a Spark on Executor provider. Examples: <pre><code>spark = ff.register_spark(\n    name=\"spark-quickstart\",\n    description=\"A Spark deployment we created for the Featureform quickstart\",\n    team=\"featureform-team\",\n    executor=databricks,\n    filestore=azure_blob_store\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Spark provider to be registered</p> required <code>executor</code> <code>ExecutorCredentials</code> <p>an Executor Provider used for the compute power</p> required <code>filestore</code> <code>FileStoreProvider</code> <p>(FileStoreProvider): a FileStoreProvider used for storage of data</p> required <code>description</code> <code>str</code> <p>Description of Spark provider to be registered</p> <code>''</code> <code>team</code> <code>str</code> <p>Name of team</p> <code>''</code> <p>Returns:</p> Name Type Description <code>spark</code> <code>OfflineSparkProvider</code> <p>Provider</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_spark(self,\nname: str,\nexecutor: ExecutorCredentials,\nfilestore: FileStoreProvider,\ndescription: str = \"\",\nteam: str = \"\",\n):\n\"\"\"Register a Spark on Executor provider.\n    **Examples**:\n    ```\n    spark = ff.register_spark(\n        name=\"spark-quickstart\",\n        description=\"A Spark deployment we created for the Featureform quickstart\",\n        team=\"featureform-team\",\n        executor=databricks,\n        filestore=azure_blob_store\n    )\n    ```\n    Args:\n        name (str): Name of Spark provider to be registered\n        executor (ExecutorCredentials): an Executor Provider used for the compute power\n        filestore: (FileStoreProvider): a FileStoreProvider used for storage of data\n        description (str): Description of Spark provider to be registered\n        team (str): Name of team\n    Returns:\n        spark (OfflineSparkProvider): Provider\n    \"\"\"\nconfig = SparkConfig(\nexecutor_type=executor.type(),\nexecutor_config=executor.config(),\nstore_type=filestore.store_type(),\nstore_config=filestore.config())\nprovider = Provider(name=name,\nfunction=\"OFFLINE\",\ndescription=description,\nteam=team,\nconfig=config)\nself.__resources.append(provider)\nreturn OfflineSparkProvider(self, provider)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_sql_transformation","title":"<code>register_sql_transformation(name, variant, query, provider, owner='', description='', schedule='', args=None)</code>","text":"<p>Register a SQL transformation source.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of source</p> required <code>variant</code> <code>str</code> <p>Name of variant</p> required <code>query</code> <code>str</code> <p>SQL query</p> required <code>provider</code> <code>Union[str, OfflineProvider]</code> <p>Provider</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of primary data to be registered</p> <code>''</code> <code>schedule</code> <code>str</code> <p>Kubernetes CronJob schedule string (\" *  * *\")</p> <code>''</code> <code>args</code> <code>K8sArgs</code> <p>Additional transformation arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>Source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_sql_transformation(self,\nname: str,\nvariant: str,\nquery: str,\nprovider: Union[str, OfflineProvider],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"Register a SQL transformation source.\n    Args:\n        name (str): Name of source\n        variant (str): Name of variant\n        query (str): SQL query\n        provider (Union[str, OfflineProvider]): Provider\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of primary data to be registered\n        schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n        args (K8sArgs): Additional transformation arguments\n    Returns:\n        source (ColumnSourceRegistrar): Source\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\nsource = Source(\nname=name,\nvariant=variant,\ndefinition=SQLTransformation(query, args),\nowner=owner,\nschedule=schedule,\nprovider=provider,\ndescription=description,\n)\nself.__resources.append(source)\nreturn ColumnSourceRegistrar(self, source)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_training_set","title":"<code>register_training_set(name, variant='default', features=[], label=(), resources=[], owner='', description='', schedule='')</code>","text":"<p>Register a training set.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of training set to be registered</p> required <code>variant</code> <code>str</code> <p>Name of variant to be registered</p> <code>'default'</code> <code>label</code> <code>NameVariant</code> <p>Label of training set</p> <code>()</code> <code>features</code> <code>List[NameVariant]</code> <p>Features of training set</p> <code>[]</code> <code>resources</code> <code>List[Resource]</code> <p>A list of previously registered resources</p> <code>[]</code> <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of training set to be registered</p> <code>''</code> <code>schedule</code> <code>str</code> <p>Kubernetes CronJob schedule string (\" *  * *\")</p> <code>''</code> <p>Returns:</p> Name Type Description <code>resource</code> <code>ResourceRegistrar</code> <p>resource</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_training_set(self,\nname: str,\nvariant: str = \"default\",\nfeatures: list = [],\nlabel: NameVariant = (),\nresources: list = [],\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nschedule: str = \"\"):\n\"\"\"Register a training set.\n    Args:\n        name (str): Name of training set to be registered\n        variant (str): Name of variant to be registered\n        label (NameVariant): Label of training set\n        features (List[NameVariant]): Features of training set\n        resources (List[Resource]): A list of previously registered resources\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of training set to be registered\n        schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n    Returns:\n        resource (ResourceRegistrar): resource\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif isinstance(features, tuple):\nraise ValueError(\"Features must be entered as a list\")\nif isinstance(label, list):\nraise ValueError(\"Label must be entered as a tuple\")\nfor resource in resources:\nfeatures += resource.features()\nresource_label = resource.label()\n# label == () if it is NOT manually entered\nif label == ():\nlabel = resource_label\n# Elif: If label was updated to store resource_label it will not check the following elif\nelif resource_label != ():\nraise ValueError(\"A training set can only have one label\")\nif isinstance(label, str):\nlabel = (label, \"default\")\nfeatures, feature_lags = self.__get_feature_nv(features)\nif label == ():\nraise ValueError(\"Label must be set\")\nif features == []:\nraise ValueError(\"A training-set must have atleast one feature\")\nresource = TrainingSet(\nname=name,\nvariant=variant,\ndescription=description,\nowner=owner,\nschedule=schedule,\nlabel=label,\nfeatures=features,\nfeature_lags=feature_lags\n)\nself.__resources.append(resource)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.register_user","title":"<code>register_user(name)</code>","text":"<p>Register a user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>User to be registered.</p> required <p>Returns:</p> Name Type Description <code>UserRegistrar</code> <code>UserRegistrar</code> <p>User</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_user(self, name: str) -&gt; UserRegistrar:\n\"\"\"Register a user.\n    Args:\n        name (str): User to be registered.\n    Returns:\n        UserRegistrar: User\n    \"\"\"\nuser = User(name)\nself.__resources.append(user)\nreturn UserRegistrar(self, user)\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.set_default_owner","title":"<code>set_default_owner(user)</code>","text":"<p>Set default owner.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>User to be set as default owner of resources.</p> required Source code in <code>src/featureform/register.py</code> <pre><code>def set_default_owner(self, user: str):\n\"\"\"Set default owner.\n    Args:\n        user (str): User to be set as default owner of resources.\n    \"\"\"\nself.__default_owner = user\n</code></pre>"},{"location":"register/#src.featureform.register.Registrar.sql_transformation","title":"<code>sql_transformation(variant, provider, name='', schedule='', owner='', description='', args=None)</code>","text":"<p>SQL transformation decorator.</p> <p>Parameters:</p> Name Type Description Default <code>variant</code> <code>str</code> <p>Name of variant</p> required <code>provider</code> <code>Union[str, OfflineProvider]</code> <p>Provider</p> required <code>name</code> <code>str</code> <p>Name of source</p> <code>''</code> <code>schedule</code> <code>str</code> <p>Kubernetes CronJob schedule string (\" *  * *\")</p> <code>''</code> <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of SQL transformation</p> <code>''</code> <code>args</code> <code>K8sArgs</code> <p>Additional transformation arguments</p> <code>None</code> <p>Returns:</p> Name Type Description <code>decorator</code> <code>SQLTransformationDecorator</code> <p>decorator</p> Source code in <code>src/featureform/register.py</code> <pre><code>def sql_transformation(self,\nvariant: str,\nprovider: Union[str, OfflineProvider],\nname: str = \"\",\nschedule: str = \"\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\",\nargs: K8sArgs = None\n):\n\"\"\"SQL transformation decorator.\n    Args:\n        variant (str): Name of variant\n        provider (Union[str, OfflineProvider]): Provider\n        name (str): Name of source\n        schedule (str): Kubernetes CronJob schedule string (\"* * * * *\")\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of SQL transformation\n        args (K8sArgs): Additional transformation arguments\n    Returns:\n        decorator (SQLTransformationDecorator): decorator\n    \"\"\"\nif not isinstance(owner, str):\nowner = owner.name()\nif owner == \"\":\nowner = self.must_get_default_owner()\nif not isinstance(provider, str):\nprovider = provider.name()\ndecorator = SQLTransformationDecorator(\nregistrar=self,\nname=name,\nvariant=variant,\nprovider=provider,\nschedule=schedule,\nowner=owner,\ndescription=description,\nargs=args,\n)\nself.__resources.append(decorator)\nreturn decorator\n</code></pre>"},{"location":"register/#src.featureform.register.OfflineSQLProvider","title":"<code>src.featureform.register.OfflineSQLProvider</code>","text":"<p>         Bases: <code>OfflineProvider</code></p> Source code in <code>src/featureform/register.py</code> <pre><code>class OfflineSQLProvider(OfflineProvider):\ndef __init__(self, registrar, provider):\nsuper().__init__(registrar, provider)\nself.__registrar = registrar\nself.__provider = provider\ndef register_table(self,\nname: str,\ntable: str,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\"):\n\"\"\"Register a SQL table as a primary data source.\n        Args:\n            name (str): Name of table to be registered\n            variant (str): Name of variant to be registered\n            table (str): Name of SQL table\n            owner (Union[str, UserRegistrar]): Owner\n            description (str): Description of table to be registered\n        Returns:\n            source (ColumnSourceRegistrar): source\n        \"\"\"\nreturn self.__registrar.register_primary_data(name=name,\nvariant=variant,\nlocation=SQLTable(table),\nowner=owner,\nprovider=self.name(),\ndescription=description)\ndef sql_transformation(self,\nowner: Union[str, UserRegistrar] = \"\",\nvariant: str = \"default\",\nname: str = \"\",\nschedule: str = \"\",\ndescription: str = \"\"):\nreturn self.__registrar.sql_transformation(name=name,\nvariant=variant,\nowner=owner,\nschedule=schedule,\nprovider=self.name(),\ndescription=description)\n</code></pre>"},{"location":"register/#src.featureform.register.OfflineSQLProvider.register_table","title":"<code>register_table(name, table, variant='default', owner='', description='')</code>","text":"<p>Register a SQL table as a primary data source.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of table to be registered</p> required <code>variant</code> <code>str</code> <p>Name of variant to be registered</p> <code>'default'</code> <code>table</code> <code>str</code> <p>Name of SQL table</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>Owner</p> <code>''</code> <code>description</code> <code>str</code> <p>Description of table to be registered</p> <code>''</code> <p>Returns:</p> Name Type Description <code>source</code> <code>ColumnSourceRegistrar</code> <p>source</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_table(self,\nname: str,\ntable: str,\nvariant: str = \"default\",\nowner: Union[str, UserRegistrar] = \"\",\ndescription: str = \"\"):\n\"\"\"Register a SQL table as a primary data source.\n    Args:\n        name (str): Name of table to be registered\n        variant (str): Name of variant to be registered\n        table (str): Name of SQL table\n        owner (Union[str, UserRegistrar]): Owner\n        description (str): Description of table to be registered\n    Returns:\n        source (ColumnSourceRegistrar): source\n    \"\"\"\nreturn self.__registrar.register_primary_data(name=name,\nvariant=variant,\nlocation=SQLTable(table),\nowner=owner,\nprovider=self.name(),\ndescription=description)\n</code></pre>"},{"location":"register/#src.featureform.register.ColumnSourceRegistrar","title":"<code>src.featureform.register.ColumnSourceRegistrar</code>","text":"<p>         Bases: <code>SourceRegistrar</code></p> Source code in <code>src/featureform/register.py</code> <pre><code>class ColumnSourceRegistrar(SourceRegistrar):\ndef register_resources(\nself,\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\n):\n\"\"\"\n        Registers a features and/or labels that can be used in training sets or served.\n        **Examples**:\n        ``` py\n        average_user_transaction.register_resources(\n            entity=user,\n            entity_column=\"CustomerID\",\n            inference_store=local,\n            features=[\n                {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"TransactionAmount\", \"type\": \"float32\"},\n            ],\n        )\n        ```\n        Args:\n            entity (Union[str, EntityRegistrar]): The name to reference the entity by when serving features\n            entity_column (str): The name of the column in the source to be used as the entity\n            owner (Union[str, UserRegistrar]): The owner of the resource(s)\n            inference_store (Union[str, OnlineProvider, FileStoreProvider]): Where to store the materialized feature for serving. (Use the local provider in Localmode)\n            features (List[ColumnMapping]): A list of column mappings to define the features\n            labels (List[ColumnMapping]): A list of column mappings to define the labels\n            timestamp_column: (str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness\n        Returns:\n            registrar (ResourceRegister): Registrar\n        \"\"\"\nreturn self.registrar().register_column_resources(\nsource=self,\nentity=entity,\nentity_column=entity_column,\nowner=owner,\ninference_store=inference_store,\nfeatures=features,\nlabels=labels,\ntimestamp_column=timestamp_column,\ndescription=description,\nschedule=schedule,\n)\n</code></pre>"},{"location":"register/#src.featureform.register.ColumnSourceRegistrar.register_resources","title":"<code>register_resources(entity, entity_column, owner='', inference_store='', features=None, labels=None, timestamp_column='', description='', schedule='')</code>","text":"<p>Registers a features and/or labels that can be used in training sets or served.</p> <p>Examples: <pre><code>average_user_transaction.register_resources(\nentity=user,\nentity_column=\"CustomerID\",\ninference_store=local,\nfeatures=[\n{\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"TransactionAmount\", \"type\": \"float32\"},\n],\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Union[str, EntityRegistrar]</code> <p>The name to reference the entity by when serving features</p> required <code>entity_column</code> <code>str</code> <p>The name of the column in the source to be used as the entity</p> required <code>owner</code> <code>Union[str, UserRegistrar]</code> <p>The owner of the resource(s)</p> <code>''</code> <code>inference_store</code> <code>Union[str, OnlineProvider, FileStoreProvider]</code> <p>Where to store the materialized feature for serving. (Use the local provider in Localmode)</p> <code>''</code> <code>features</code> <code>List[ColumnMapping]</code> <p>A list of column mappings to define the features</p> <code>None</code> <code>labels</code> <code>List[ColumnMapping]</code> <p>A list of column mappings to define the labels</p> <code>None</code> <code>timestamp_column</code> <code>str</code> <p>(str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness</p> <code>''</code> <p>Returns:</p> Name Type Description <code>registrar</code> <code>ResourceRegister</code> <p>Registrar</p> Source code in <code>src/featureform/register.py</code> <pre><code>def register_resources(\nself,\nentity: Union[str, EntityRegistrar],\nentity_column: str,\nowner: Union[str, UserRegistrar] = \"\",\ninference_store: Union[str, OnlineProvider, FileStoreProvider] = \"\",\nfeatures: List[ColumnMapping] = None,\nlabels: List[ColumnMapping] = None,\ntimestamp_column: str = \"\",\ndescription: str = \"\",\nschedule: str = \"\",\n):\n\"\"\"\n    Registers a features and/or labels that can be used in training sets or served.\n    **Examples**:\n    ``` py\n    average_user_transaction.register_resources(\n        entity=user,\n        entity_column=\"CustomerID\",\n        inference_store=local,\n        features=[\n            {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"TransactionAmount\", \"type\": \"float32\"},\n        ],\n    )\n    ```\n    Args:\n        entity (Union[str, EntityRegistrar]): The name to reference the entity by when serving features\n        entity_column (str): The name of the column in the source to be used as the entity\n        owner (Union[str, UserRegistrar]): The owner of the resource(s)\n        inference_store (Union[str, OnlineProvider, FileStoreProvider]): Where to store the materialized feature for serving. (Use the local provider in Localmode)\n        features (List[ColumnMapping]): A list of column mappings to define the features\n        labels (List[ColumnMapping]): A list of column mappings to define the labels\n        timestamp_column: (str): The name of an optional timestamp column in the dataset. Will be used to match the features and labels with point-in-time correctness\n    Returns:\n        registrar (ResourceRegister): Registrar\n    \"\"\"\nreturn self.registrar().register_column_resources(\nsource=self,\nentity=entity,\nentity_column=entity_column,\nowner=owner,\ninference_store=inference_store,\nfeatures=features,\nlabels=labels,\ntimestamp_column=timestamp_column,\ndescription=description,\nschedule=schedule,\n)\n</code></pre>"},{"location":"search/","title":"Search","text":"Source code in <code>src/featureform/search.py</code> <pre><code>def search(phrase, host):\nresponse = requests.get(f\"http://{host}/data/search?q={phrase}\")\nif response.status_code is not 200:\nprint(f\"Search request for {phrase} resulted in HTTP status {response.status_code}\")\nreturn\nresults = response.json()\nif len(results) == 0:\nprint(f\"Search phrase {phrase} returned no results.\")\nelse:\nformat_rows(\"NAME\", \"VARIANT\", \"TYPE\")\nfor r in results:\nformat_rows(r[\"Name\"], r[\"Variant\"], r[\"Type\"])\nreturn results\n</code></pre>"},{"location":"search_local/","title":"Search local","text":"Source code in <code>src/featureform/search_local.py</code> <pre><code>def search_local(phrase):\ndb = SQLiteMetadata()\nresults = db.search(phrase=phrase)\nif len(results) == 0:\nprint(f\"Search phrase {phrase} returned no results.\")\nreturn []\nelse:\nreturn results\n</code></pre>"},{"location":"serve/","title":"Serving","text":""},{"location":"serve/#src.featureform.serving.ServingClient","title":"<code>src.featureform.serving.ServingClient</code>","text":"<p>The serving client is used to retrieve training sets and features for training and serving purposes.</p> <p>Using the Serving Client: <pre><code>import featureform as ff\nfrom featureform import ServingClient\nclient = ServingClient(host=\"localhost:8000\")\n# example:\ndataset = client.training_set(\"fraud_training\", \"quickstart\")\ntraining_dataset = dataset.repeat(10).shuffle(1000).batch(8)\nfor feature_batch in training_dataset:\n# Train model\n</code></pre></p> Source code in <code>src/featureform/serving.py</code> <pre><code>class ServingClient:\n\"\"\"\n    The serving client is used to retrieve training sets and features for training and serving purposes.\n    **Using the Serving Client:**\n    ``` py\n    import featureform as ff\n    from featureform import ServingClient\n    client = ServingClient(host=\"localhost:8000\")\n    # example:\n    dataset = client.training_set(\"fraud_training\", \"quickstart\")\n    training_dataset = dataset.repeat(10).shuffle(1000).batch(8)\n    for feature_batch in training_dataset:\n        # Train model\n    ```\n    \"\"\"\ndef __init__(self, host=None, local=False, insecure=False, cert_path=None):\n\"\"\"\n        Args:\n            host (str): The hostname of the Featureform instance. Exclude if using Localmode.\n            local (bool): True if using Localmode.\n            insecure (bool): True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate\n            cert_path (str): The path to a public certificate if using a self-signed certificate.\n        \"\"\"\nif local and host:\nraise ValueError(\"Host and local cannot both be set\")\nif local:\nself.impl = LocalClientImpl()\nelse:\nself.impl = HostedClientImpl(host, insecure, cert_path)\ndef training_set(self, name, variant=\"default\", include_label_timestamp=False, model: Union[str, Model] = None):\n\"\"\"Return an iterator that iterates through the specified training set.\n        **Examples**:\n        ``` py\n            client = ff.ServingClient()\n            dataset = client.training_set(\"fraud_training\", \"quickstart\")\n            training_dataset = dataset.repeat(10).shuffle(1000).batch(8)\n            for feature_batch in training_dataset:\n                # Train model\n        ```\n        Args:\n            name (str): Name of training set to be retrieved\n            variant (str): Variant of training set to be retrieved\n        Returns:\n            training set (Dataset): A training set iterator\n        \"\"\"\nreturn self.impl.training_set(name, variant, include_label_timestamp, model)\ndef features(self, features, entities, model: Union[str, Model] = None):\n\"\"\"Returns the feature values for the specified entities.\n        **Examples**:\n        ``` py\n            client = ff.ServingClient(local=True)\n            fpf = client.features([(\"avg_transactions\", \"quickstart\")], {\"user\": \"C1410926\"})\n            # Run features through model\n        ```\n        Args:\n            features (list[(str, str)], list[str]): List of Name Variant Tuples\n            entities (dict): Dictionary of entity name/value pairs\n        Returns:\n            features (numpy.Array): An Numpy array of feature values in the order given by the inputs\n        \"\"\"\nfeatures = check_feature_type(features)\nreturn self.impl.features(features, entities, model)\n</code></pre>"},{"location":"serve/#src.featureform.serving.ServingClient.__init__","title":"<code>__init__(host=None, local=False, insecure=False, cert_path=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The hostname of the Featureform instance. Exclude if using Localmode.</p> <code>None</code> <code>local</code> <code>bool</code> <p>True if using Localmode.</p> <code>False</code> <code>insecure</code> <code>bool</code> <p>True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate</p> <code>False</code> <code>cert_path</code> <code>str</code> <p>The path to a public certificate if using a self-signed certificate.</p> <code>None</code> Source code in <code>src/featureform/serving.py</code> <pre><code>def __init__(self, host=None, local=False, insecure=False, cert_path=None):\n\"\"\"\n    Args:\n        host (str): The hostname of the Featureform instance. Exclude if using Localmode.\n        local (bool): True if using Localmode.\n        insecure (bool): True if connecting to an insecure Featureform endpoint. False if using a self-signed or public TLS certificate\n        cert_path (str): The path to a public certificate if using a self-signed certificate.\n    \"\"\"\nif local and host:\nraise ValueError(\"Host and local cannot both be set\")\nif local:\nself.impl = LocalClientImpl()\nelse:\nself.impl = HostedClientImpl(host, insecure, cert_path)\n</code></pre>"},{"location":"serve/#src.featureform.serving.ServingClient.features","title":"<code>features(features, entities, model=None)</code>","text":"<p>Returns the feature values for the specified entities.</p> <p>Examples: <pre><code>    client = ff.ServingClient(local=True)\nfpf = client.features([(\"avg_transactions\", \"quickstart\")], {\"user\": \"C1410926\"})\n# Run features through model\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>features</code> <code>list[str, str], list[str]</code> <p>List of Name Variant Tuples</p> required <code>entities</code> <code>dict</code> <p>Dictionary of entity name/value pairs</p> required <p>Returns:</p> Name Type Description <code>features</code> <code>numpy.Array</code> <p>An Numpy array of feature values in the order given by the inputs</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def features(self, features, entities, model: Union[str, Model] = None):\n\"\"\"Returns the feature values for the specified entities.\n    **Examples**:\n    ``` py\n        client = ff.ServingClient(local=True)\n        fpf = client.features([(\"avg_transactions\", \"quickstart\")], {\"user\": \"C1410926\"})\n        # Run features through model\n    ```\n    Args:\n        features (list[(str, str)], list[str]): List of Name Variant Tuples\n        entities (dict): Dictionary of entity name/value pairs\n    Returns:\n        features (numpy.Array): An Numpy array of feature values in the order given by the inputs\n    \"\"\"\nfeatures = check_feature_type(features)\nreturn self.impl.features(features, entities, model)\n</code></pre>"},{"location":"serve/#src.featureform.serving.ServingClient.training_set","title":"<code>training_set(name, variant='default', include_label_timestamp=False, model=None)</code>","text":"<p>Return an iterator that iterates through the specified training set.</p> <p>Examples: <pre><code>    client = ff.ServingClient()\ndataset = client.training_set(\"fraud_training\", \"quickstart\")\ntraining_dataset = dataset.repeat(10).shuffle(1000).batch(8)\nfor feature_batch in training_dataset:\n# Train model\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of training set to be retrieved</p> required <code>variant</code> <code>str</code> <p>Variant of training set to be retrieved</p> <code>'default'</code> <p>Returns:</p> Type Description <p>training set (Dataset): A training set iterator</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def training_set(self, name, variant=\"default\", include_label_timestamp=False, model: Union[str, Model] = None):\n\"\"\"Return an iterator that iterates through the specified training set.\n    **Examples**:\n    ``` py\n        client = ff.ServingClient()\n        dataset = client.training_set(\"fraud_training\", \"quickstart\")\n        training_dataset = dataset.repeat(10).shuffle(1000).batch(8)\n        for feature_batch in training_dataset:\n            # Train model\n    ```\n    Args:\n        name (str): Name of training set to be retrieved\n        variant (str): Variant of training set to be retrieved\n    Returns:\n        training set (Dataset): A training set iterator\n    \"\"\"\nreturn self.impl.training_set(name, variant, include_label_timestamp, model)\n</code></pre>"},{"location":"serve/#src.featureform.serving.Dataset","title":"<code>src.featureform.serving.Dataset</code>","text":"Source code in <code>src/featureform/serving.py</code> <pre><code>class Dataset:\ndef __init__(self, stream, dataframe=None):\n\"\"\"Repeats the Dataset for the specified number of times\n        Args:\n            stream (Iterator): An iterable object.\n        Returns:\n            self (Dataset): Returns a Dataset created from the iterable object.\n        \"\"\"\nself._stream = stream\nself._dataframe = dataframe\ndef from_stub(self, name, version, model: Union[str, Model] = None):\nstream = Stream(self._stream, name, version, model)\nreturn Dataset(stream)\ndef from_dataframe(dataframe, include_label_timestamp):\nstream = LocalStream(dataframe.values.tolist(), include_label_timestamp)\nreturn Dataset(stream, dataframe)\ndef pandas(self):\nreturn self._dataframe\ndef repeat(self, num):\n\"\"\"Repeats the Dataset for the specified number of times\n        **Examples**:\n        ``` py\n            client = ff.ServingClient()\n            dataset = client.training_set(\"fraud_training\", \"quickstart\")\n            training_dataset = dataset.repeat(10) # Repeats data 10 times\n            for feature_batch in training_dataset:\n                # Train model\n        ```\n        Args:\n            num (int): The number of times the dataset will be repeated\n        Returns:\n            self (Dataset): Returns the current Dataset\n        \"\"\"\nif num &lt;= 0:\nraise Exception(\"Must repeat 1 or more times\")\nself._stream = Repeat(num, self._stream)\nif self._dataframe is not None:\ntemp_df = self._dataframe\nfor i in range(num):\nself._dataframe = self._dataframe.append(temp_df)\nreturn self\ndef shuffle(self, buffer_size):\n\"\"\"Swaps random rows within the Dataset.\n        **Examples**:\n        ``` py\n            client = ff.ServingClient()\n            dataset = client.training_set(\"fraud_training\", \"quickstart\")\n            training_dataset = dataset.shuffle(100) # Swaps 100 Rows\n            for feature_batch in training_dataset:\n                # Train model\n        ```\n        Args:\n            buffer_size (int): The number of Dataset rows to be randomly swapped\n        Returns:\n            self (Dataset): Returns the current Dataset\n        \"\"\"\nif buffer_size &lt;= 0:\nraise Exception(\"Buffer size must be greater than or equal to 1\")\nself._stream = Shuffle(buffer_size, self._stream)\nif self._dataframe is not None:\nself._dataframe = self._dataframe.sample(frac=1) \nreturn self\ndef batch(self, batch_size):\n\"\"\"Creates a batch row in the Dataset.\n        **Examples**:\n        ``` py\n            client = ff.ServingClient()\n            dataset = client.training_set(\"fraud_training\", \"quickstart\")\n            training_dataset = dataset.batch(8) # Creates a batch of 8 Datasets for each row\n            for feature_batch in training_dataset:\n                # Train model\n        ```\n        Args:\n            batch_size (int): The number of items to be added to each batch\n        Returns:\n            self (Dataset): Returns the current Dataset\n        \"\"\"\nif batch_size &lt;= 0:\nraise Exception(\"Batch size must be greater than or equal to 1\")\nself._stream = Batch(batch_size, self._stream)\nif self._dataframe is not None:\nself._dataframe = np.array_split(self._dataframe, math.ceil(len(self._dataframe) // batch_size))\nreturn self\ndef __iter__(self):\nreturn self\ndef __next__(self):\nnext_val = next(self._stream)\nreturn next_val\n</code></pre>"},{"location":"serve/#src.featureform.serving.Dataset.__init__","title":"<code>__init__(stream, dataframe=None)</code>","text":"<p>Repeats the Dataset for the specified number of times</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>Iterator</code> <p>An iterable object.</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Dataset</code> <p>Returns a Dataset created from the iterable object.</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def __init__(self, stream, dataframe=None):\n\"\"\"Repeats the Dataset for the specified number of times\n    Args:\n        stream (Iterator): An iterable object.\n    Returns:\n        self (Dataset): Returns a Dataset created from the iterable object.\n    \"\"\"\nself._stream = stream\nself._dataframe = dataframe\n</code></pre>"},{"location":"serve/#src.featureform.serving.Dataset.batch","title":"<code>batch(batch_size)</code>","text":"<p>Creates a batch row in the Dataset.</p> <p>Examples: <pre><code>    client = ff.ServingClient()\ndataset = client.training_set(\"fraud_training\", \"quickstart\")\ntraining_dataset = dataset.batch(8) # Creates a batch of 8 Datasets for each row\nfor feature_batch in training_dataset:\n# Train model\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>batch_size</code> <code>int</code> <p>The number of items to be added to each batch</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Dataset</code> <p>Returns the current Dataset</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def batch(self, batch_size):\n\"\"\"Creates a batch row in the Dataset.\n    **Examples**:\n    ``` py\n        client = ff.ServingClient()\n        dataset = client.training_set(\"fraud_training\", \"quickstart\")\n        training_dataset = dataset.batch(8) # Creates a batch of 8 Datasets for each row\n        for feature_batch in training_dataset:\n            # Train model\n    ```\n    Args:\n        batch_size (int): The number of items to be added to each batch\n    Returns:\n        self (Dataset): Returns the current Dataset\n    \"\"\"\nif batch_size &lt;= 0:\nraise Exception(\"Batch size must be greater than or equal to 1\")\nself._stream = Batch(batch_size, self._stream)\nif self._dataframe is not None:\nself._dataframe = np.array_split(self._dataframe, math.ceil(len(self._dataframe) // batch_size))\nreturn self\n</code></pre>"},{"location":"serve/#src.featureform.serving.Dataset.repeat","title":"<code>repeat(num)</code>","text":"<p>Repeats the Dataset for the specified number of times</p> <p>Examples: <pre><code>    client = ff.ServingClient()\ndataset = client.training_set(\"fraud_training\", \"quickstart\")\ntraining_dataset = dataset.repeat(10) # Repeats data 10 times\nfor feature_batch in training_dataset:\n# Train model\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>num</code> <code>int</code> <p>The number of times the dataset will be repeated</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Dataset</code> <p>Returns the current Dataset</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def repeat(self, num):\n\"\"\"Repeats the Dataset for the specified number of times\n    **Examples**:\n    ``` py\n        client = ff.ServingClient()\n        dataset = client.training_set(\"fraud_training\", \"quickstart\")\n        training_dataset = dataset.repeat(10) # Repeats data 10 times\n        for feature_batch in training_dataset:\n            # Train model\n    ```\n    Args:\n        num (int): The number of times the dataset will be repeated\n    Returns:\n        self (Dataset): Returns the current Dataset\n    \"\"\"\nif num &lt;= 0:\nraise Exception(\"Must repeat 1 or more times\")\nself._stream = Repeat(num, self._stream)\nif self._dataframe is not None:\ntemp_df = self._dataframe\nfor i in range(num):\nself._dataframe = self._dataframe.append(temp_df)\nreturn self\n</code></pre>"},{"location":"serve/#src.featureform.serving.Dataset.shuffle","title":"<code>shuffle(buffer_size)</code>","text":"<p>Swaps random rows within the Dataset.</p> <p>Examples: <pre><code>    client = ff.ServingClient()\ndataset = client.training_set(\"fraud_training\", \"quickstart\")\ntraining_dataset = dataset.shuffle(100) # Swaps 100 Rows\nfor feature_batch in training_dataset:\n# Train model\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>buffer_size</code> <code>int</code> <p>The number of Dataset rows to be randomly swapped</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Dataset</code> <p>Returns the current Dataset</p> Source code in <code>src/featureform/serving.py</code> <pre><code>def shuffle(self, buffer_size):\n\"\"\"Swaps random rows within the Dataset.\n    **Examples**:\n    ``` py\n        client = ff.ServingClient()\n        dataset = client.training_set(\"fraud_training\", \"quickstart\")\n        training_dataset = dataset.shuffle(100) # Swaps 100 Rows\n        for feature_batch in training_dataset:\n            # Train model\n    ```\n    Args:\n        buffer_size (int): The number of Dataset rows to be randomly swapped\n    Returns:\n        self (Dataset): Returns the current Dataset\n    \"\"\"\nif buffer_size &lt;= 0:\nraise Exception(\"Buffer size must be greater than or equal to 1\")\nself._stream = Shuffle(buffer_size, self._stream)\nif self._dataframe is not None:\nself._dataframe = self._dataframe.sample(frac=1) \nreturn self\n</code></pre>"},{"location":"version/","title":"Version","text":""}]}